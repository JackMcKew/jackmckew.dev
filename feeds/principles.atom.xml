<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jack McKew's Blog - Principles</title><link href="https://jackmckew.dev/" rel="alternate"></link><link href="https://jackmckew.dev/feeds/principles.atom.xml" rel="self"></link><id>https://jackmckew.dev/</id><updated>2023-05-10T00:00:00+10:00</updated><subtitle>Engineer | Software Developer | Data Scientist</subtitle><entry><title>Lessons Learnt After 100 Blog Posts</title><link href="https://jackmckew.dev/lessons-learnt-after-100-blog-posts.html" rel="alternate"></link><published>2023-05-10T00:00:00+10:00</published><updated>2023-05-10T00:00:00+10:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2023-05-10:/lessons-learnt-after-100-blog-posts.html</id><summary type="html">&lt;body&gt;&lt;p&gt;This post is dedicated to my late partner Jackie, who I absolutely couldn't of done any part of this blog without. Life will never be the same without you, but I'm trying to make the most of every day for the both of us.&lt;/p&gt;
&lt;p&gt;If you're reading this, this is …&lt;/p&gt;&lt;/body&gt;</summary><content type="html">&lt;body&gt;&lt;p&gt;This post is dedicated to my late partner Jackie, who I absolutely couldn't of done any part of this blog without. Life will never be the same without you, but I'm trying to make the most of every day for the both of us.&lt;/p&gt;
&lt;p&gt;If you're reading this, this is blog post number #100! I can't believe I've written 100 blog posts and I've enjoyed almost every bit of it!&lt;/p&gt;
&lt;p&gt;This blog was initially created as a way to document things that I'd created or looked into for when future me had forgotten and needed a refresher; and still stays that way at the time of writing. Making this blog a completely open source resource, from how the site is built to the content, was a deliberate choice as learning in the open both allows for others to benefit from your efforts at the same time and for others to recognise the demonstration &amp;amp; dedication to the craft and the community.&lt;/p&gt;
&lt;p&gt;Here are the key takeaways that I've learnt after writing a blog post every week for 100 weeks:&lt;/p&gt;
&lt;h2 id="consistency"&gt;Consistency&lt;/h2&gt;
&lt;p&gt;As long as you've got a steady flow of ideas to write about, it makes it so much easier to write. By also holding yourself accountable to a regularly schedule to publish posts, this gives you drive to get something out there no matter how good/bad it is, I've written some horrible blog posts but also written some that I come back to time and time again. To balance out the publish schedule and life, I've took to writing multiple blog posts and keeping them ready to go and having a break off writing. This allows for breaks between writing and lots of content being generated when the feeling comes.&lt;/p&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;Make sure to write down every idea that you have, whether it's be done before or isn't possible, keep this stash for when you hit a writers block (not if, but when it happens). Don't feel bad to cull things from this list if they no longer interest you either! Personally I use &lt;a href="https://keep.google.com/"&gt;Google Keep&lt;/a&gt; with a list of ideas that I have for both larger projects (which can make up series of posts) or single posts.&lt;/p&gt;
&lt;h2 id="history"&gt;History&lt;/h2&gt;
&lt;p&gt;One of the biggest benefits that having a record of how to do something or what my thinking was at the time, is being able to look back at it. Not only that but give it straight to someone else that might be trying to do the same thing in the future! Countless number of times I've had people come to me with questions on how to do something, and I can direct them to a blog post that I'd written which may help them through that stage of the problem they are facing.&lt;/p&gt;
&lt;h2 id="communication"&gt;Communication&lt;/h2&gt;
&lt;p&gt;I personally believe my communications skills have &lt;strong&gt;dramatically&lt;/strong&gt; improved after writing blog posts, especially technical communication. If we were to go through my earlier posts to my most recent posts, you can definitely see improvements in both language, style and brevity. This goes for in and outside of written communication!&lt;/p&gt;
&lt;h2 id="employment"&gt;Employment&lt;/h2&gt;
&lt;p&gt;I can honestly attribute some of my career successes to this blog, both by having enough interest &amp;amp; requests that I started my own freelancing business to facilitate these requests, and in job opportunities that I'm found for through my writing. Writing blog posts both improve my technical knowledge in an area and improve my financial situation as well!&lt;/p&gt;
&lt;h2 id="simple"&gt;Simple&lt;/h2&gt;
&lt;p&gt;KISS, keep it simple stupid, is a motto that I &lt;em&gt;attempt&lt;/em&gt; to write my blog posts in such a way that anyone (with no prior experience) can pick up and read the post and hopefully get the general gist of it. If not, I try to link to potential resources on the internet to fill in the background holes for the reader to understand the topic further.&lt;/p&gt;
&lt;h2 id="pictures"&gt;Pictures&lt;/h2&gt;
&lt;p&gt;A picture is worth a thousand words, if a blog post can be aided by a picture or a visualisation of the topic, this makes it &lt;strong&gt;so much&lt;/strong&gt; easier for the reader to comprehend. This also draws more people towards the post and it'll be more interesting.&lt;/p&gt;
&lt;p&gt;I hope that you've enjoyed these past 100 blog posts and they've helped someone, somewhere out.&lt;/p&gt;&lt;/body&gt;</content><category term="Principles"></category><category term="habits"></category><category term="principles"></category></entry><entry><title>Python Project Workflow</title><link href="https://jackmckew.dev/python-project-workflow.html" rel="alternate"></link><published>2019-08-30T06:30:00+10:00</published><updated>2019-08-30T06:30:00+10:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2019-08-30:/python-project-workflow.html</id><summary type="html">&lt;body&gt;&lt;p&gt;This post will go through my personal preference on project structure and workflow for creating a new project and an insight how I work on my projects from a development point of view. I will go from the very start as if I did not have Python/Git installed on …&lt;/p&gt;&lt;/body&gt;</summary><content type="html">&lt;body&gt;&lt;p&gt;This post will go through my personal preference on project structure and workflow for creating a new project and an insight how I work on my projects from a development point of view. I will go from the very start as if I did not have Python/Git installed on my machine whatsoever.&lt;/p&gt;
&lt;p&gt;First of all, we need to get Python! Head over to &lt;a href="https://www.python.org/downloads/"&gt;https://www.python.org/downloads/&lt;/a&gt; to get the version of Python you need (or default to the latest Python 3 stable release). For version control in my projects, I also like to use Git so, head on over to &lt;a href="https://git-scm.com/downloads"&gt;https://git-scm.com/downloads&lt;/a&gt; to download Git for your operating system.&lt;/p&gt;
&lt;p&gt;Now once these are installed (if you put them in the default location), Python will default to be located in: C:\Users\Jack\AppData\Local\Programs\Python\Python37-32. For the next few steps to ensure we are setting up virtual environments for our projects open command prompt here if you are on windows. This will look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image-11.png" class="img-fluid" src="https://jackmckew.dev/img/image-11.png"/&gt;&lt;/p&gt;
&lt;p&gt;The 'cd' command in windows (and other OS) stands for change directory, follow this with a path and you will be brought to that directory. Next whenever I first install Python I like to update pip to it's latest release, to do this use the command in this window:&lt;/p&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python -m pip install --upgrade pip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;With pip upgraded to it's current release, it's time to install some very helpful packages for setting up projects: virtualenv and cookiecutter. To install these navigate to the the Scripts folder within the current directory with cd ('cd Scripts') and run 'pip.exe install virtualenv cookiecutter', pip will then work it's magic and install these packages for you.&lt;/p&gt;
&lt;p&gt;If you take a peek into the Scripts folder now in your Python directory, it'll look a little like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image-2.png" class="img-fluid" src="https://jackmckew.dev/img/image-2.png"/&gt;
Now something that I personally like to do is add this folder to your system environment variables in Windows so it's much easier to run any packages in your root Python installation on your PC. To do this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;type in 'system environment' into the search command&lt;/li&gt;
&lt;li&gt;select environment variables from the bottom right corner&lt;/li&gt;
&lt;li&gt;edit system (or user) path variable&lt;/li&gt;
&lt;li&gt;browse and select the Scripts directory in your Python installation&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you chose to do this step, you will now be able to create virtual environments and cookiecutter templates without having to specify the directory to the executables.&lt;/p&gt;
&lt;p&gt;It's now time to create a project from scratch. So navigate to where you like to keep your projects (mostly mine is in Documents\Github\) but you can put them anywhere you like. Now run command prompt again (or keep the one you have open) and navigate to the dedicated folder (or folders) using cd.&lt;/p&gt;
&lt;p&gt;For most of my projects lately being of data science in nature, I like to use the cookiecutter-data-science template which you can find all the information about here: &lt;a href="https://drivendata.github.io/cookiecutter-data-science/"&gt;https://drivendata.github.io/cookiecutter-data-science/&lt;/a&gt;. To then create a project it is as simple as running:&lt;/p&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cookiecutter https://github.com/drivendata/cookiecutter-data-science
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;img alt="image-3.png" class="img-fluid" src="https://jackmckew.dev/img/image-3.png"/&gt;&lt;/p&gt;
&lt;p&gt;Provide as much information as you wish into the questions and you will now have a folder created wherever you ran the command with all the relevant sections from the template.&lt;/p&gt;
&lt;p&gt;Whenever starting a new Python project, my personal preference is to keep the virtual environment within the directory, however this is not always a normal practice. To create a virtual environment for our Python packages, navigate into the project and run (if you added Scripts to your Path):&lt;/p&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;virtualenv env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;This will then initialise a folder within your current directory to install a copy of Python and all it's relevant tools with a folder ('env').&lt;/p&gt;
&lt;p&gt;Before we go any further, this is the point that I like to initialise a git repository. To do this, run git init from your command line from within the project directory.&lt;/p&gt;
&lt;p&gt;Now to finish off the final steps of the workflow that will affect the day-to-day development, I like to use pre-commit hooks to reformat my with black and on some projects check for PEP conformance with flake8 on every commit to my projects repository. This is purely a personal preference on how you would like to work, others like to use pytest and more to ensure their projects are working as intended, however I am not at that stage just yet.&lt;/p&gt;
&lt;p&gt;To install these pre-commits into our workflow, firstly initialise the virtual environment from within our project by navigating to env/Scripts/activate.bat. This will activate your project's Python package management system and runtime, following this you can install packages from pip and otherwise. For our pre-commits we install the package 'pre-commit':&lt;/p&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install pre-commit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;Following this to set up the commit hooks create a '.pre-commit-config.yaml' within your main project directory. This is where we will specify what hooks we would like to run before being able to commit. Below is a sample .pre-commit-config.yaml that I use in my projects:&lt;/p&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;repos:
-   repo: https://github.com/ambv/black
    rev: stable
    hooks:
    - id: black
      language_version: python3.7
-   repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v2.3.0
    hooks:
    -   id: flake8
    -   id: check-yaml
    -   id: end-of-file-fixer
    -   id: trailing-whitespace
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;Now to install these, activate your virtual environment like above, navigate to the project directory and run 'pre-commit install'. This will install the pre-commit hooks within your git directory. Before going any further, I highly recommend to run 'pre-commit run --all-files' to both ensure pre-commit is working as expected and check if there is any project specific settings you may have to set.&lt;/p&gt;
&lt;p&gt;On the default cookiecutter data science template with the settings as per above this will show on the pre-commit run (after you have staged changes in git (use git add -A for all)):&lt;/p&gt;
&lt;p&gt;&lt;img alt="image-4.png" class="img-fluid" src="https://jackmckew.dev/img/image-4.png"/&gt;&lt;/p&gt;
&lt;p&gt;We can see a different opinions in code formatting appearing already from flake8's output. The black code formatter in Python's code length is 88 characters , not 79 like PEP8. So we will add a pyproject.toml to the project directory where we can specify settings within the black tool:&lt;/p&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;tool.black&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;line-length = 79&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;include = '\.pyi?$'&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;exclude = '''&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;/(&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;\.git&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;| \.hg&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;| \.mypy_cache&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;| \.tox&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;| \.venv&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;| \.docs&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;| _build&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;| buck-out&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;| build&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;| dist&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;)/&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;For any flake8 specific settings (such as error codes to ignore), we can set a .flake8 file in the project directory as well, which may look like:&lt;/p&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;flake8&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ignore = E203, E266, E501, W503, F403, F401&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;max-line-length = 88&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;max-complexity = 18&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;select = B,C,E,F,W,T4,B9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;Finally we are able to run a commit to our project!&lt;/p&gt;
&lt;p&gt;&lt;img alt="image-5.png" class="img-fluid" src="https://jackmckew.dev/img/image-5.png"/&gt;&lt;/p&gt;&lt;/body&gt;</content><category term="Python"></category><category term="python"></category></entry><entry><title>Episode 7 – Planning</title><link href="https://jackmckew.dev/episode-7-planning.html" rel="alternate"></link><published>2019-01-04T07:30:00+11:00</published><updated>2019-01-04T07:30:00+11:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2019-01-04:/episode-7-planning.html</id><summary type="html">&lt;body&gt;&lt;p&gt;With 2018 coming to an end, we welcome in the new year with the first episode of Code Fridays for 2018. Continuing with the theme of things starting a new, this episode is dedicated to a major factor or stage in any type of development, planning.&lt;/p&gt;
&lt;p&gt;Planning is one of …&lt;/p&gt;&lt;/body&gt;</summary><content type="html">&lt;body&gt;&lt;p&gt;With 2018 coming to an end, we welcome in the new year with the first episode of Code Fridays for 2018. Continuing with the theme of things starting a new, this episode is dedicated to a major factor or stage in any type of development, planning.&lt;/p&gt;
&lt;p&gt;Planning is one of the most crucial steps when beginning to tackle a project or even a problem. One of the most effective ways to deal with a problem coming from a time or financial perspective is prevention of the problem. By considering what problems may arise in a project’s lifetime, the developer or designer can implement prevention before the problem comes to fruition.&lt;/p&gt;
&lt;p&gt;Being an effective planner can help you in all walks of life. Not only can one just plan for problems that may arise in a project, one can also plan to educate themselves with the knowledge to tackle unforeseen problems within a project.&lt;/p&gt;
&lt;p&gt;With an entire new year ahead of us all, I’d like to plan on what I’d like to learn in 2019 and in turn share what I learn with you all through this blog.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Containerization – integrating containerization as mentioned in Episode 6 into projects&lt;/li&gt;
&lt;li&gt;Javascript – javascript is still an enigma to me at this point, I plan to work on beginner projects and hopefully integrate some of them to enhance this website&lt;/li&gt;
&lt;li&gt;Developing, deploying and maintaining an Android Application – I am currently midway through developing an Android application, in future episodes I will write tutorials on how to develop certain elements with an Android application to make it more interactive&lt;/li&gt;
&lt;li&gt;Big Data tools – Apache arrow and Hadoop are also new to me at this point, hoping to integrate these elements into projects that I’m currently working on&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is only just a small taste of what I am planning to cover at the very least on my weekly updates in this blog so stay tuned throughout the whole year!&lt;/p&gt;&lt;/body&gt;</content><category term="Principles"></category></entry><entry><title>Episode 3 - Open Mind</title><link href="https://jackmckew.dev/episode-3-open-mind.html" rel="alternate"></link><published>2018-12-07T03:10:00+11:00</published><updated>2018-12-07T03:10:00+11:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2018-12-07:/episode-3-open-mind.html</id><summary type="html">&lt;body&gt;&lt;p&gt;While it always may seem to be easiest to keep using what you've always used in the past, sometimes it pays off to keep an open mind about how you approach problems.&lt;/p&gt;
&lt;p&gt;Recently was asked to create a database with minute interval data from 600-700 data recording stations for up …&lt;/p&gt;&lt;/body&gt;</summary><content type="html">&lt;body&gt;&lt;p&gt;While it always may seem to be easiest to keep using what you've always used in the past, sometimes it pays off to keep an open mind about how you approach problems.&lt;/p&gt;
&lt;p&gt;Recently was asked to create a database with minute interval data from 600-700 data recording stations for up to the past 60 years, truly a lot of a data to handle.&lt;/p&gt;
&lt;p&gt;My first pass over was to use the python pandas module, with great success, however iterating over the data sets took around a week. By looking out for new ways to tackle problems, I was able to increase the speed 450 times faster by using dask to parallelize my data frames and multiprocessing allowing multiple workers to work across many cores of the PC. This meant going from around 60,000 rows per second to 1.5 million rows/second and 18 workers at one time.&lt;/p&gt;
&lt;p&gt;For the next version I am planning to investigate how to utilize influxDB and Apache Spark/Hadoop to try and optimize this process further.&lt;/p&gt;&lt;/body&gt;</content><category term="Python"></category><category term="database"></category><category term="selfimprovement"></category></entry></feed>