<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jack McKew's Blog - Engineering</title><link href="https://jackmckew.dev/" rel="alternate"></link><link href="https://jackmckew.dev/feeds/engineering.atom.xml" rel="self"></link><id>https://jackmckew.dev/</id><updated>2019-06-21T06:30:00+10:00</updated><subtitle>Engineer | Software Developer | Data Scientist</subtitle><entry><title>Python and Data Security (Hashing Algorithms)</title><link href="https://jackmckew.dev/python-and-data-security-hashing-algorithms.html" rel="alternate"></link><published>2019-06-21T06:30:00+10:00</published><updated>2019-06-21T06:30:00+10:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2019-06-21:/python-and-data-security-hashing-algorithms.html</id><summary type="html">&lt;body&gt;&lt;p&gt;Data security is becoming more and more prevalent in today's society than ever before. We must make a conscious effort to secure both our physical lives, but also our digital lives as well. With data privacy, sharing of information and access control becoming integrated into most people's life in some …&lt;/p&gt;&lt;/body&gt;</summary><content type="html">&lt;body&gt;&lt;p&gt;Data security is becoming more and more prevalent in today's society than ever before. We must make a conscious effort to secure both our physical lives, but also our digital lives as well. With data privacy, sharing of information and access control becoming integrated into most people's life in some way or another. Since this topic is so wide and deep, this will most likely become a series of posts as I am passionate around data security and enjoy getting stuck right into the math behind it. This post will be around hashing algorithms but future topics will include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hashing Algorithms (this post),&lt;/li&gt;
&lt;li&gt;Modular Arithmetic and why it's used,&lt;/li&gt;
&lt;li&gt;Securely sharing keys,&lt;/li&gt;
&lt;li&gt;Methods of encryption,&lt;/li&gt;
&lt;li&gt;Methods of data security,&lt;/li&gt;
&lt;li&gt;Analyzing security weaknesses,&lt;/li&gt;
&lt;li&gt;Many more.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As above, this post is dedicated to hashing algorithms and how to interface with them with Python for data security.&lt;/p&gt;
&lt;h3 id="what-is-a-hashing-algorithm"&gt;What is a Hashing Algorithm&lt;/h3&gt;
&lt;p&gt;The sole purpose of a hashing algorithm is to generate a safe hash which in turn raises the questions of what is a hash and what makes it safe?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A hash is a value computed from a base input number using a hashing function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With a hashing function being:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;strong&gt;hash function&lt;/strong&gt; is any &lt;a href="https://en.wikipedia.org/wiki/Function_(mathematics)"&gt;function&lt;/a&gt; that can be used to map &lt;a href="https://en.wikipedia.org/wiki/Data_(computing)"&gt;data&lt;/a&gt; of arbitrary size onto data of a fixed size.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Hash_function"&gt;https://en.wikipedia.org/wiki/Hash_function&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The hashing algorithm is intrinsically designed to be a one-way function, meaning it is impractical to revert. Although, as history has shown, as computing advances are made hashing algorithms are becoming compromised. A prime example of this being the MD5 algorithm, which was designed and used a cryptographic hash function (data security), but is now so simply reverse, that it is used for verifying data transfers.&lt;/p&gt;
&lt;p&gt;There are certain characteristics around what the perfect or ideal hash function for data security should possess:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Easy/speed of computation,&lt;/li&gt;
&lt;li&gt;Impossible/impractical to regenerate source data/message (brute force as only option),&lt;/li&gt;
&lt;li&gt;Unique hashes for data (also known as hash collisions when there are duplicate hashes),&lt;/li&gt;
&lt;li&gt;Any change is source data should change the hash value (known as the avalanche effect).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="what-is-hashing-used-for-in-practice"&gt;What is hashing used for in practice&lt;/h3&gt;
&lt;p&gt;Hashing algorithms for data security in the real world is used in a variety of situations from ensuring files were successfully delivered correctly or to store sensitive/private information. If you are reading this, I can almost guarantee that you have some interface with a hashing algorithm right now! Whether it be how you're password is stored to indexing data in a database.&lt;/p&gt;
&lt;h3 id="using-hashes-with-python"&gt;Using hashes with Python&lt;/h3&gt;
&lt;p&gt;This will be a simple use-case of a hashing algorithm using Python to securely convert passwords and how to verify against them (storing the hashed data is it's own beast in itself). Please note I will be utilizing the &lt;a href="https://passlib.readthedocs.io/en/stable/"&gt;passlib&lt;/a&gt; package which contains over 30 password hashing algorithms, as well as a framework for managing existing password hashes.&lt;/p&gt;
&lt;p&gt;First of all we must select a hashing algorithm to use, to help with this from the team at passlib they have provided a &lt;a href="https://passlib.readthedocs.io/en/stable/narr/quickstart.html"&gt;basic guideline of questions&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Does the hash need to be natively supported by your operating system’s &lt;code&gt;crypt()&lt;/code&gt; api,in order to allow inter-operation with third-party applications on the host?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If yes, the right choice is either &lt;a href="https://passlib.readthedocs.io/en/stable/lib/passlib.hash.bcrypt.html#passlib.hash.bcrypt"&gt;&lt;code&gt;bcrypt&lt;/code&gt;&lt;/a&gt; for BSD variants,or &lt;a href="https://passlib.readthedocs.io/en/stable/lib/passlib.hash.sha512_crypt.html#passlib.hash.sha512_crypt"&gt;&lt;code&gt;sha512_crypt&lt;/code&gt;&lt;/a&gt; for Linux; since these are natively supported.&lt;/li&gt;
&lt;li&gt;If no, continue...&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Does your hosting provider allow you to install C extensions?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If no, you probably want to use &lt;a href="https://passlib.readthedocs.io/en/stable/lib/passlib.hash.pbkdf2_digest.html#passlib.hash.pbkdf2_sha256"&gt;&lt;code&gt;pbkdf2_sha256&lt;/code&gt;&lt;/a&gt;,as this currently has the fastest pure-python backend.&lt;/li&gt;
&lt;li&gt;If they allow C extensions, continue...&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do you want to use the latest &amp;amp; greatest, and don’t mind increased memory usage when hashing?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://passlib.readthedocs.io/en/stable/lib/passlib.hash.argon2.html#passlib.hash.argon2"&gt;&lt;code&gt;argon2&lt;/code&gt;&lt;/a&gt; is a next-generation hashing algorithm,attempting to become the new standard. It’s design has been being slightly tweaked since 2013, but will quite likely become &lt;em&gt;the&lt;/em&gt; standard in the next few years. You’ll need to install the &lt;a href="https://pypi.python.org/pypi/argon2_cffi"&gt;argon2_cffi&lt;/a&gt; support library.&lt;/li&gt;
&lt;li&gt;If you want something secure, but more battle tested, continue...&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The top choices left are &lt;a href="https://passlib.readthedocs.io/en/stable/lib/passlib.hash.bcrypt.html#passlib.hash.bcrypt"&gt;&lt;code&gt;bcrypt&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://passlib.readthedocs.io/en/stable/lib/passlib.hash.pbkdf2_digest.html#passlib.hash.pbkdf2_sha256"&gt;&lt;code&gt;pbkdf2_sha256&lt;/code&gt;&lt;/a&gt;. Both have advantages, and their respective rough edges; though currently the balance is in favor of bcrypt (pbkdf2 can be cracked somewhat more efficiently).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If choosing bcrypt, we strongly recommend installing the &lt;a href="https://pypi.python.org/pypi/bcrypt"&gt;bcrypt&lt;/a&gt; support library on non-BSD operating systems.&lt;/li&gt;
&lt;li&gt;If choosing pbkdf2, especially on python2 \&amp;lt; 2.7.8 and python 3 \&amp;lt; 3.4, you will probably want to install &lt;a href="https://pypi.python.org/pypi/fastpbkdf2"&gt;fastpbk2&lt;/a&gt; support library.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;From this, we will use the argon2 hashing algorithm. As normal, it is best practice to set up a virtual environment (or conda environment) and install the dependencies, in this case passlib.&lt;/p&gt;
&lt;p&gt;First of all, import the hashing algorithm you wish to use from the passlib package:&lt;/p&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;passlib.hash&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;argon2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;Following importing the hashing algorithm, to hash the password in our case is very simple and we can have a peak at what the output hash looks like:&lt;/p&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argon2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"super_secret_password"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;\&lt;span class="math"&gt;\(argon2i\\)&lt;/span&gt;v=19\&lt;span class="math"&gt;\(m=102400,t=2,p=8\\)&lt;/span&gt;NqY05lyrtdb6v/ee03pvrQ\$mvLTquN71JPjuC+S9QNXYA&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The first section ("\&lt;span class="math"&gt;\(argon2i\\)&lt;/span&gt;v=19\&lt;span class="math"&gt;\(m=102400,t=2,p=8\\)&lt;/span&gt;") is the header information, showing the parameters that the algorithm used to generate the hash. While this seems as if it would make the algorithm easier to break, imagine a scenario where every password is hashed using an hashing algorithm with randomised parameters; verifying passwords would be a nightmare. Let's further break down what this represents:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\$argon2i - the variant of Argon2 algorithm being used,&lt;/li&gt;
&lt;li&gt;\$v=19 - the version of Argon2 being used,&lt;/li&gt;
&lt;li&gt;\$m=102400,t=2,p=8 - the memory (m), iterations (t) and parallelism (p) parameters being used,&lt;/li&gt;
&lt;li&gt;\$NqY05lyrtdb6v/ee03pvrQ - the base64-encoded salt (added randomness), using standard base64 encoding and no padding,&lt;/li&gt;
&lt;li&gt;\$mvLTquN71JPjuC+S9QNXYA - the base64-encoded hashed password (derived key), using standard base64 encoding and no padding.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we run this again, we can check that the outputs are completely different due to the randomly generated salt.&lt;/p&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argon2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"super_secret_password"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;\&lt;span class="math"&gt;\(argon2i\\)&lt;/span&gt;v=19\&lt;span class="math"&gt;\(m=102400,t=2,p=8\\)&lt;/span&gt;8f4/x7hXitGacy6F8N67dw\$/jPKQ98vLQCxkboxRlHa/g&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now that we've generated our new passwords, stored them away in a secure database somewhere, using a secure method of communication somehow, our user wants to login with the password they signed up with ("super_secret_password") and we have to check if this is the correct password.&lt;/p&gt;
&lt;p&gt;To do this with passlib, it is as simply as calling the .verify function with the plaintext and the equivalent hash which will return a boolean value determining whether of not the password is correct or not.&lt;/p&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argon2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"super_secret_password"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;True&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hooray! Our password verification system works, now we would like to check that if the user inputs a incorrect password that our algorithm returns correctly (false).&lt;/p&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argon2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"user_name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;False&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="conclusion"&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Hopefully this has given you some insight into what hashing algorithms are, how they are used and how to use them with Python. They can both be an extremely powerful tool for securing data, however, must always be revisited later on down the track as advancements are made and your system may now be compromised.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;&lt;/body&gt;</content><category term="Python"></category><category term="python"></category><category term="security"></category></entry><entry><title>Explained: Voltage Drop</title><link href="https://jackmckew.dev/explained-voltage-drop.html" rel="alternate"></link><published>2019-05-10T06:30:00+10:00</published><updated>2019-05-10T06:30:00+10:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2019-05-10:/explained-voltage-drop.html</id><summary type="html">&lt;body&gt;&lt;p&gt;Voltage drop is a electrical phenomenon in that wires carrying current always have resistance, or impedance to the current flow. Voltage drop is defined as the amount of loss that occurs through part of or all of a circuit due to resistance/impedance.&lt;/p&gt;
&lt;p&gt;The most well known analogy for explaining …&lt;/p&gt;&lt;/body&gt;</summary><content type="html">&lt;body&gt;&lt;p&gt;Voltage drop is a electrical phenomenon in that wires carrying current always have resistance, or impedance to the current flow. Voltage drop is defined as the amount of loss that occurs through part of or all of a circuit due to resistance/impedance.&lt;/p&gt;
&lt;p&gt;The most well known analogy for explaining voltage, current and voltage drop is a hose carrying water. In the garden hose, the water pressure is the voltage, the amount of water flowing is the current and the type and size of the hose makes up the resistance. Thus meaning that voltage drop is the loss of water pressure from the supply end of the hose to the output.&lt;/p&gt;
&lt;p&gt;When designing electrical systems within Australia and New Zealand, we are required to design to Australian standards. For voltage drop, the relevant standards as AS/NZS3000 (Wiring Rules) and AS/NZS3008 (Cable Selection). Where AS/NZS3000 nominates the limits to conform to (5% maximum from point of supply) and AS3008 dictates multiple ways that voltage drop can be calculated.&lt;/p&gt;
&lt;p&gt;For this post, I will demonstrate a simplified method that is outlined in AS3000 Table C7 where it specifies 'Am per %Vd' (Amp meters per % voltage drop) for each cable size:&lt;/p&gt;
&lt;table class="table table-striped"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Cable Conductor Size&lt;/th&gt;
&lt;th&gt;Single Phase (230V) Am per %Vd&lt;/th&gt;
&lt;th&gt;Three Phase (400V) Am per %Vd&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1mm^2^&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;90&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1.5mm^2^&lt;/td&gt;
&lt;td&gt;70&lt;/td&gt;
&lt;td&gt;140&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.5mm^2^&lt;/td&gt;
&lt;td&gt;128&lt;/td&gt;
&lt;td&gt;256&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4mm^2^&lt;/td&gt;
&lt;td&gt;205&lt;/td&gt;
&lt;td&gt;412&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6mm^2^&lt;/td&gt;
&lt;td&gt;306&lt;/td&gt;
&lt;td&gt;615&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10mm^2^&lt;/td&gt;
&lt;td&gt;515&lt;/td&gt;
&lt;td&gt;1034&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16mm^2^&lt;/td&gt;
&lt;td&gt;818&lt;/td&gt;
&lt;td&gt;1643&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25mm^2^&lt;/td&gt;
&lt;td&gt;1289&lt;/td&gt;
&lt;td&gt;2588&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;35mm^2^&lt;/td&gt;
&lt;td&gt;1773&lt;/td&gt;
&lt;td&gt;3560&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;50mm^2^&lt;/td&gt;
&lt;td&gt;2377&lt;/td&gt;
&lt;td&gt;4772&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;70mm^2^&lt;/td&gt;
&lt;td&gt;3342&lt;/td&gt;
&lt;td&gt;6712&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;95mm^2^&lt;/td&gt;
&lt;td&gt;4445&lt;/td&gt;
&lt;td&gt;8927&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For example, a 50m run of 10mm\^2^ cable carrying 3 phase 32A will result in 5% drop: 32A * 50m = 1600 / 1034 = 1.5%.&lt;/p&gt;
&lt;p&gt;In future posts, I will go into the various ways that AS/NZS3008 demonstrates ways of calculating voltage drop.&lt;/p&gt;&lt;/body&gt;</content><category term="Engineering"></category><category term="electrical"></category></entry><entry><title>How to Program an ESP8266 with MicroPython</title><link href="https://jackmckew.dev/how-to-program-an-esp8266-with-micropython.html" rel="alternate"></link><published>2019-04-05T06:30:00+11:00</published><updated>2019-04-05T06:30:00+11:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2019-04-05:/how-to-program-an-esp8266-with-micropython.html</id><content type="html">&lt;body&gt;&lt;p&gt;Following the previous two weeks of topics, &lt;a href="https://jackmckew.dev/introduction-to-esp32-esp8266.html"&gt;Introduction to ESP32/ESP8266&lt;/a&gt; and &lt;a href="https://jackmckew.dev/what-is-micropython.html"&gt;What is MicroPython?&lt;/a&gt;.  I wrote an &lt;a href="https://maker.pro/esp8266/tutorial/how-to-program-an-esp8266-with-micropython"&gt;article on maker.pro&lt;/a&gt; in which I describe how to program the ESP8266 with MicroPython in detail.&lt;/p&gt;&lt;/body&gt;</content><category term="Engineering"></category><category term="electrical"></category><category term="esp8266"></category></entry><entry><title>Introduction to ESP32/ESP8266</title><link href="https://jackmckew.dev/introduction-to-esp32-esp8266.html" rel="alternate"></link><published>2019-03-22T06:30:00+11:00</published><updated>2019-03-22T06:30:00+11:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2019-03-22:/introduction-to-esp32-esp8266.html</id><summary type="html">&lt;body&gt;&lt;h2 id="what-is-an-esp32esp8266"&gt;What is an ESP32/ESP8266&lt;/h2&gt;
&lt;p&gt;The ESP32 and ESP8266 are low-cost Wi-Fi modules, which are perfect for DIY Internet of Things (IoT) projects. They both come with general purpose input/output pins (GPIOs), support a variety of protocols such as SPI, I2C, UART and many more. The most attractive part …&lt;/p&gt;&lt;/body&gt;</summary><content type="html">&lt;body&gt;&lt;h2 id="what-is-an-esp32esp8266"&gt;What is an ESP32/ESP8266&lt;/h2&gt;
&lt;p&gt;The ESP32 and ESP8266 are low-cost Wi-Fi modules, which are perfect for DIY Internet of Things (IoT) projects. They both come with general purpose input/output pins (GPIOs), support a variety of protocols such as SPI, I2C, UART and many more. The most attractive part of the ESP range is that they come with wireless networking included, separating them from their Arduino microcontroller counterparts. All in all, the ESP series allows you to easily control/monitor devices remotely using Wi-Fi for a very low price.&lt;/p&gt;
&lt;h3 id="esp32-vs-esp8266"&gt;ESP32 vs ESP8266&lt;/h3&gt;
&lt;p&gt;The ESP32 is the later ‘model’ of the ESP8266. It added a whole suite of new functionality such as: touch sensitive pins, built-in temperature and hall effect sensors and upgraded from single core CPU to a dual core, faster Wi-FI, more GPIOs and now supports Bluetooth and BLE (Bluetooth Low Energy). While both boards are very low-cost, the ESP32 costs slightly more, the ESP8266 (here in Australia) costs around \~\&lt;span class="math"&gt;\(10AU, and the ESP32 around \~\\)&lt;/span&gt;22AU.&lt;/p&gt;
&lt;p&gt;&lt;img alt="\
**ESP8266**\
" class="img-fluid" src="https://lh5.googleusercontent.com/YEn9Lm0l_QN1jP9Ea6uZmsv35BVp1tqf5hzIZxX3FrVzfZ1MeN6k5pgU-gR6sWmydMCJr0s0pgN8yDBWOQ3-7FqAmAd2ic81lL-QyWsL_Vmu7DAObpqPS3KbeOCC6-ZVT_yV8F9x"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="\
**ESP32**\
" class="img-fluid" src="https://lh4.googleusercontent.com/yDWgNpn3xMkKX994_b1IzbLWxbo83S2DDKlgS9y4wVbp37ADfVuJwF2EX6H_UWEzcmHfxe_cuABMR920dr0Ebx5WNOwtj0mhoIZjPwiBQcEp0HI1_ZeB4RoL9xaDqCDd4h9651Cv"/&gt;&lt;/p&gt;
&lt;h2 id="flavours-of-esp-boards"&gt;Flavours of ESP boards&lt;/h2&gt;
&lt;p&gt;There are currently many different varieties of ESP flavours you can buy off the shelf, while if you are more into developing the board around your ESP module (the pictures above) you can simply just purchase the relevant ESP module, or if you are like me and don’t want to bother soldering and developing your own board there is a solutions for you!\&lt;/p&gt;
&lt;h3 id="esp32-development-boards"&gt;ESP32 Development Boards&lt;/h3&gt;
&lt;h4 id="esp32-thing-sparkfun"&gt;ESP32 Thing - Sparkfun&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Sparkfun Image" class="img-fluid" src="https://lh4.googleusercontent.com/KbaOiY3Ua8m_lSgC-RJu8arkN7Ao77SkRh8GBIqHYs13cJz4QD50ZNfJ7LzQh8OLUvmOvbwI1aABuY5airc2IlLBnV23U-I6PoX14HuFPBe4xHEEh8RR11TWp0ZTaINXCUoYJNC4"/&gt;&lt;/p&gt;
&lt;p&gt;The ESP32 Thing comes with all the functionalities to easily communication and program the ESP32 with your computer (including a on-board USB-Serial). It also features a LiPo charger, so your ESP32 project can use rechargeable batteries without having to solder any terminals and make it easy to replace/disconnect the battery pack.&lt;/p&gt;
&lt;h4 id="espressif-esp32-development-board-developer-edition"&gt;Espressif ESP32 Development Board - Developer Edition&lt;/h4&gt;
&lt;p&gt;&lt;img alt="ESP32 Image" class="img-fluid" src="https://lh4.googleusercontent.com/nEUzBIo2o0em3J1qshFFcl5j8nhsyrQ3u6hMco2gW590xiJhmjhOd7dRu8IUcCzu5yuKfOS43gEOaHSsNYRGIvLKSc1Yb3MjRL8vIZT5LNkTXud_DWZqL7paMXOPYx9eLzR2fPgX"/&gt;&lt;/p&gt;
&lt;p&gt;If you’re not confident on soldering the header pins on the Sparkfun Thing board, then the Espressif board comes with that done for you! The header pins are also nicely spaced out so if you are a breadboard enthusiast, you can just plug and play on your breadboard and start connecting all your header wires.&lt;/p&gt;
&lt;h3 id="esp8266-development-boards"&gt;ESP8266 Development Boards&lt;/h3&gt;
&lt;h4 id="nodemcu"&gt;NodeMCU&lt;/h4&gt;
&lt;p&gt;&lt;img alt="NodeMCU Image" class="img-fluid" src="https://lh4.googleusercontent.com/8uW0VTOhEuA6ILjpw2C2Mfv34emw8jjj9rIpuWjbedNzku76cVO6hBoScNNPpx1Ei0P4ci31B0gYeaO2hfvOER1v67J1PXAfkey9cFzvPWIU4qPL4Q3bb3vcnK5GBlIZu8hr2ujm"/&gt;&lt;/p&gt;
&lt;p&gt;The NodeMCU is my personal favourite ESP flavour board because it is friendly to your breadboard, has an on-board USB-Serial and can be powered by USB. This all means that you can test and develop your board straight out of the box without fiddling around with soldering pins, voltages or getting any extra components (except a Micro-usb cable).&lt;/p&gt;
&lt;h4 id="adafruit-huzzah-esp8266-breakout"&gt;Adafruit Huzzah ESP8266 Breakout&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Huzzah Board Image" class="img-fluid" src="https://lh6.googleusercontent.com/BN-_9XEuEPYw5wl_AiDR5OfcwF2ulK7SQMrpnmglXTe41m7ssb22kARsw8zyzmBJFeFQgHXG4jZQu1RN4Lj0itUJgeqqosQN7zZ4pzavsBPtguSzM819r2W7l-uBixDY4ZwRHDqq"/&gt;&lt;/p&gt;
&lt;p&gt;The Huzzah board is Adafruits answer to other development boards that weren’t friendly to breadboards, didn’t have on-board voltage regulators and weren’t CE or FCC emitter certified. The Huzzah board comes with all these functionalities, although unlike the NodeMCU you will need to get a USB-Serial cable to able to program your Huzzah board.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;&lt;/body&gt;</content><category term="Engineering"></category><category term="esp8266"></category></entry><entry><title>Episode 17 – Networking Routing &amp; Addressing</title><link href="https://jackmckew.dev/episode-17-networking-routing-addressing.html" rel="alternate"></link><published>2019-03-15T06:30:00+11:00</published><updated>2019-03-15T06:30:00+11:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2019-03-15:/episode-17-networking-routing-addressing.html</id><summary type="html">&lt;body&gt;&lt;p&gt;Following last weeks post around network topologies, I believe the next topic to cover is routing and addressing. Routing is the process of selecting a path for traffic to flow through in a network while addressing is marking elements within a network. A real-world example of routing and addressing is …&lt;/p&gt;&lt;/body&gt;</summary><content type="html">&lt;body&gt;&lt;p&gt;Following last weeks post around network topologies, I believe the next topic to cover is routing and addressing. Routing is the process of selecting a path for traffic to flow through in a network while addressing is marking elements within a network. A real-world example of routing and addressing is the postal system, each element (person) is marked with an address (eg, a street address) and the mail makes it to that address from routing it from the sender to the receiver.&lt;/p&gt;
&lt;p&gt;While the goal for routing may be simple (“go from sender to receiver in the most efficient/quickest way possible”), the techniques used to achieve this can be very complex and confusing but when solutions are found that make a network work efficiently, it is a very rewarding experience for all users.&lt;/p&gt;
&lt;p&gt;Routing can be broken into three broad categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Protocols – the medium that allows information to move through a network&lt;/li&gt;
&lt;li&gt;Algorithms – to determine paths between sender and receiver&lt;/li&gt;
&lt;li&gt;Databases – to store information that the algorithms determine&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The whole premise around routers in a network (&lt;a href="https://jackmckew.dev/episode-16-networking-basics.html"&gt;Networking Basics&lt;/a&gt;) is that they will “pass it on”, either to their smarter peers or in the correct direction. For example in a star/tree network, devices pass information to their closest ‘router’ which then decides either to pass it directly to the correct address or to another router which may have a better idea on where the information is intended on going.&lt;/p&gt;
&lt;h3 id="protocols"&gt;Protocols&lt;/h3&gt;
&lt;p&gt;In industry, some of the most common networking protocols are MODBUS and DNP3. Modbus being a de-facto standard for interconnecting electrical equipment and DNP3 (Distributed Network Protocol) commonly being used in the water/electric industries for their flexibility during outages or broken links in a network.&lt;/p&gt;
&lt;h3 id="algorithms"&gt;Algorithms&lt;/h3&gt;
&lt;p&gt;Routing tables is the most prevalent type of routing algorithms with their fixed nature meaning once the routing decisions for how information travels have been decided, they do not change. The other type of routing algorithms (which are much more exciting) are known as adaptive algorithms, which means the routing changes depending on: topology, delay, load, etc, to try and reach the most efficient path from sender to receiver.&lt;/p&gt;
&lt;h3 id="databases"&gt;Databases&lt;/h3&gt;
&lt;p&gt;Following algorithms, databases can either hold the entire routing table and a router looks up where it wants to go and it which path to take (similar to a bus timetable), or, forwarding tables (technically can be apart of routing tables as well) which detail the communications pathways to utilize for types of traffic.&lt;/p&gt;&lt;/body&gt;</content><category term="Engineering"></category><category term="networking"></category></entry></feed>